
GccApplication3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f5c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080f5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  20000434  00081390  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004c0  0008141c  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008c0  0008181c  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000911f  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000173b  00000000  00000000  000295d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001246  00000000  00000000  0002ad10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000280  00000000  00000000  0002bf56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  0002c1d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000142e7  00000000  00000000  0002c3ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006209  00000000  00000000  000406b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000567f6  00000000  00000000  000468be  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000728  00000000  00000000  0009d0b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	c0 08 00 20 4d 03 08 00 49 03 08 00 49 03 08 00     ... M...I...I...
   80010:	49 03 08 00 49 03 08 00 49 03 08 00 00 00 00 00     I...I...I.......
	...
   8002c:	49 03 08 00 49 03 08 00 00 00 00 00 49 03 08 00     I...I.......I...
   8003c:	31 09 08 00 49 03 08 00 49 03 08 00 49 03 08 00     1...I...I...I...
   8004c:	49 03 08 00 49 03 08 00 49 03 08 00 49 03 08 00     I...I...I...I...
   8005c:	49 03 08 00 d9 0b 08 00 49 03 08 00 00 00 00 00     I.......I.......
   8006c:	49 03 08 00 49 03 08 00 49 03 08 00 49 03 08 00     I...I...I...I...
	...
   80084:	49 03 08 00 49 03 08 00 49 03 08 00 49 03 08 00     I...I...I...I...
   80094:	49 03 08 00 49 03 08 00 49 03 08 00 49 03 08 00     I...I...I...I...
   800a4:	00 00 00 00 49 03 08 00 49 03 08 00 49 03 08 00     ....I...I...I...
   800b4:	49 03 08 00 49 03 08 00 49 03 08 00 49 03 08 00     I...I...I...I...
   800c4:	49 03 08 00 49 03 08 00 49 03 08 00 49 03 08 00     I...I...I...I...
   800d4:	49 03 08 00 49 03 08 00 49 03 08 00 49 03 08 00     I...I...I...I...
   800e4:	49 03 08 00 49 03 08 00 d9 02 08 00 49 03 08 00     I...I.......I...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080f5c 	.word	0x00080f5c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080f5c 	.word	0x00080f5c
   80154:	20000438 	.word	0x20000438
   80158:	00080f5c 	.word	0x00080f5c
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80162:	1857      	adds	r7, r2, r1
   80164:	2f08      	cmp	r7, #8
   80166:	bfd4      	ite	le
   80168:	2300      	movle	r3, #0
   8016a:	2301      	movgt	r3, #1
   8016c:	2908      	cmp	r1, #8
   8016e:	bf98      	it	ls
   80170:	2a08      	cmpls	r2, #8
   80172:	d85c      	bhi.n	8022e <can_init+0xce>
   80174:	460d      	mov	r5, r1
   80176:	2b00      	cmp	r3, #0
   80178:	d159      	bne.n	8022e <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   8017a:	4a2e      	ldr	r2, [pc, #184]	; (80234 <can_init+0xd4>)
   8017c:	6813      	ldr	r3, [r2, #0]
   8017e:	f023 0301 	bic.w	r3, r3, #1
   80182:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   80184:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80186:	4b2c      	ldr	r3, [pc, #176]	; (80238 <can_init+0xd8>)
   80188:	f44f 7440 	mov.w	r4, #768	; 0x300
   8018c:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   8018e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80190:	f024 0403 	bic.w	r4, r4, #3
   80194:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80196:	2403      	movs	r4, #3
   80198:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   8019a:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   8019c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801a0:	4c26      	ldr	r4, [pc, #152]	; (8023c <can_init+0xdc>)
   801a2:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801aa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801ae:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801b2:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801b4:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801b6:	e019      	b.n	801ec <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b8:	481e      	ldr	r0, [pc, #120]	; (80234 <can_init+0xd4>)
   801ba:	f101 0310 	add.w	r3, r1, #16
   801be:	015b      	lsls	r3, r3, #5
   801c0:	18c2      	adds	r2, r0, r3
   801c2:	2600      	movs	r6, #0
   801c4:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801c6:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   801ca:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   801ce:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801d2:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   801d6:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801d8:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   801dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   801e0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801e4:	2301      	movs	r3, #1
   801e6:	408b      	lsls	r3, r1
   801e8:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ea:	3101      	adds	r1, #1
   801ec:	42b9      	cmp	r1, r7
   801ee:	dde3      	ble.n	801b8 <can_init+0x58>
   801f0:	2300      	movs	r3, #0
   801f2:	e00d      	b.n	80210 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801f4:	490f      	ldr	r1, [pc, #60]	; (80234 <can_init+0xd4>)
   801f6:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   801fa:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   801fe:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80202:	f103 0210 	add.w	r2, r3, #16
   80206:	0152      	lsls	r2, r2, #5
   80208:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   8020c:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8020e:	3301      	adds	r3, #1
   80210:	42ab      	cmp	r3, r5
   80212:	dbef      	blt.n	801f4 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80214:	4b07      	ldr	r3, [pc, #28]	; (80234 <can_init+0xd4>)
   80216:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80218:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8021c:	4a08      	ldr	r2, [pc, #32]	; (80240 <can_init+0xe0>)
   8021e:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80220:	681a      	ldr	r2, [r3, #0]
   80222:	f042 0201 	orr.w	r2, r2, #1
   80226:	601a      	str	r2, [r3, #0]

	return 0;
   80228:	2000      	movs	r0, #0
}
   8022a:	bcf0      	pop	{r4, r5, r6, r7}
   8022c:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   8022e:	2001      	movs	r0, #1
   80230:	e7fb      	b.n	8022a <can_init+0xca>
   80232:	bf00      	nop
   80234:	400b4000 	.word	0x400b4000
   80238:	400e0e00 	.word	0x400e0e00
   8023c:	1000102b 	.word	0x1000102b
   80240:	e000e100 	.word	0xe000e100

00080244 <can_init_def_tx_rx_mb>:
{
   80244:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80246:	2202      	movs	r2, #2
   80248:	2101      	movs	r1, #1
   8024a:	4b01      	ldr	r3, [pc, #4]	; (80250 <can_init_def_tx_rx_mb+0xc>)
   8024c:	4798      	blx	r3
}
   8024e:	bd08      	pop	{r3, pc}
   80250:	00080161 	.word	0x00080161

00080254 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80254:	014b      	lsls	r3, r1, #5
   80256:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8025a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80262:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80266:	d033      	beq.n	802d0 <can_receive+0x7c>
{
   80268:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   8026a:	014b      	lsls	r3, r1, #5
   8026c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80270:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80274:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80278:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   8027c:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80280:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80284:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80286:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   8028a:	f3c5 4503 	ubfx	r5, r5, #16, #4
   8028e:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80290:	2300      	movs	r3, #0
   80292:	e003      	b.n	8029c <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80294:	18c6      	adds	r6, r0, r3
   80296:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   80298:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   8029a:	3301      	adds	r3, #1
   8029c:	42ab      	cmp	r3, r5
   8029e:	da05      	bge.n	802ac <can_receive+0x58>
			if(i < 4)
   802a0:	2b03      	cmp	r3, #3
   802a2:	dcf7      	bgt.n	80294 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802a4:	18c6      	adds	r6, r0, r3
   802a6:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   802a8:	0a24      	lsrs	r4, r4, #8
   802aa:	e7f6      	b.n	8029a <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802ac:	4b09      	ldr	r3, [pc, #36]	; (802d4 <can_receive+0x80>)
   802ae:	f101 0210 	add.w	r2, r1, #16
   802b2:	0152      	lsls	r2, r2, #5
   802b4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802b8:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802ba:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802be:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802c6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802ca:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802cc:	bc70      	pop	{r4, r5, r6}
   802ce:	4770      	bx	lr
		return 1;
   802d0:	2001      	movs	r0, #1
   802d2:	4770      	bx	lr
   802d4:	400b4000 	.word	0x400b4000

000802d8 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802d8:	b510      	push	{r4, lr}
   802da:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   802dc:	4b15      	ldr	r3, [pc, #84]	; (80334 <CAN0_Handler+0x5c>)
   802de:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802e0:	f014 0f06 	tst.w	r4, #6
   802e4:	d019      	beq.n	8031a <CAN0_Handler+0x42>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802e6:	f014 0f02 	tst.w	r4, #2
   802ea:	d108      	bne.n	802fe <CAN0_Handler+0x26>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802ec:	f014 0f04 	tst.w	r4, #4
   802f0:	d00a      	beq.n	80308 <CAN0_Handler+0x30>
		
		{
			can_receive(&message, 2);
   802f2:	2102      	movs	r1, #2
   802f4:	a801      	add	r0, sp, #4
   802f6:	4b10      	ldr	r3, [pc, #64]	; (80338 <CAN0_Handler+0x60>)
   802f8:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   802fa:	2300      	movs	r3, #0
   802fc:	e009      	b.n	80312 <CAN0_Handler+0x3a>
			can_receive(&message, 1);
   802fe:	2101      	movs	r1, #1
   80300:	a801      	add	r0, sp, #4
   80302:	4b0d      	ldr	r3, [pc, #52]	; (80338 <CAN0_Handler+0x60>)
   80304:	4798      	blx	r3
   80306:	e7f8      	b.n	802fa <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80308:	480c      	ldr	r0, [pc, #48]	; (8033c <CAN0_Handler+0x64>)
   8030a:	4b0d      	ldr	r3, [pc, #52]	; (80340 <CAN0_Handler+0x68>)
   8030c:	4798      	blx	r3
   8030e:	e7f4      	b.n	802fa <CAN0_Handler+0x22>
		for (int i = 0; i < message.data_length; i++)
   80310:	3301      	adds	r3, #1
   80312:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80316:	4293      	cmp	r3, r2
   80318:	dbfa      	blt.n	80310 <CAN0_Handler+0x38>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   8031a:	f014 0f01 	tst.w	r4, #1
   8031e:	d002      	beq.n	80326 <CAN0_Handler+0x4e>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   80320:	2201      	movs	r2, #1
   80322:	4b04      	ldr	r3, [pc, #16]	; (80334 <CAN0_Handler+0x5c>)
   80324:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80326:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8032a:	4b06      	ldr	r3, [pc, #24]	; (80344 <CAN0_Handler+0x6c>)
   8032c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   80330:	b004      	add	sp, #16
   80332:	bd10      	pop	{r4, pc}
   80334:	400b4000 	.word	0x400b4000
   80338:	00080255 	.word	0x00080255
   8033c:	00080e64 	.word	0x00080e64
   80340:	00080845 	.word	0x00080845
   80344:	e000e100 	.word	0xe000e100

00080348 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80348:	e7fe      	b.n	80348 <Dummy_Handler>
	...

0008034c <Reset_Handler>:
{
   8034c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   8034e:	4b11      	ldr	r3, [pc, #68]	; (80394 <Reset_Handler+0x48>)
   80350:	4a11      	ldr	r2, [pc, #68]	; (80398 <Reset_Handler+0x4c>)
   80352:	429a      	cmp	r2, r3
   80354:	d009      	beq.n	8036a <Reset_Handler+0x1e>
   80356:	4b0f      	ldr	r3, [pc, #60]	; (80394 <Reset_Handler+0x48>)
   80358:	4a0f      	ldr	r2, [pc, #60]	; (80398 <Reset_Handler+0x4c>)
   8035a:	e003      	b.n	80364 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   8035c:	6811      	ldr	r1, [r2, #0]
   8035e:	6019      	str	r1, [r3, #0]
   80360:	3304      	adds	r3, #4
   80362:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   80364:	490d      	ldr	r1, [pc, #52]	; (8039c <Reset_Handler+0x50>)
   80366:	428b      	cmp	r3, r1
   80368:	d3f8      	bcc.n	8035c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   8036a:	4b0d      	ldr	r3, [pc, #52]	; (803a0 <Reset_Handler+0x54>)
   8036c:	e002      	b.n	80374 <Reset_Handler+0x28>
                *pDest++ = 0;
   8036e:	2200      	movs	r2, #0
   80370:	601a      	str	r2, [r3, #0]
   80372:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   80374:	4a0b      	ldr	r2, [pc, #44]	; (803a4 <Reset_Handler+0x58>)
   80376:	4293      	cmp	r3, r2
   80378:	d3f9      	bcc.n	8036e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8037a:	4b0b      	ldr	r3, [pc, #44]	; (803a8 <Reset_Handler+0x5c>)
   8037c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80380:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80384:	4a09      	ldr	r2, [pc, #36]	; (803ac <Reset_Handler+0x60>)
   80386:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   80388:	4b09      	ldr	r3, [pc, #36]	; (803b0 <Reset_Handler+0x64>)
   8038a:	4798      	blx	r3
        main();
   8038c:	4b09      	ldr	r3, [pc, #36]	; (803b4 <Reset_Handler+0x68>)
   8038e:	4798      	blx	r3
   80390:	e7fe      	b.n	80390 <Reset_Handler+0x44>
   80392:	bf00      	nop
   80394:	20000000 	.word	0x20000000
   80398:	00080f5c 	.word	0x00080f5c
   8039c:	20000434 	.word	0x20000434
   803a0:	20000434 	.word	0x20000434
   803a4:	200004c0 	.word	0x200004c0
   803a8:	00080000 	.word	0x00080000
   803ac:	e000ed00 	.word	0xe000ed00
   803b0:	00080c41 	.word	0x00080c41
   803b4:	0008045d 	.word	0x0008045d

000803b8 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   803b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   803bc:	4a20      	ldr	r2, [pc, #128]	; (80440 <SystemInit+0x88>)
   803be:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   803c0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   803c4:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   803c6:	4b1f      	ldr	r3, [pc, #124]	; (80444 <SystemInit+0x8c>)
   803c8:	6a1b      	ldr	r3, [r3, #32]
   803ca:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   803ce:	d107      	bne.n	803e0 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   803d0:	4a1d      	ldr	r2, [pc, #116]	; (80448 <SystemInit+0x90>)
   803d2:	4b1c      	ldr	r3, [pc, #112]	; (80444 <SystemInit+0x8c>)
   803d4:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   803d6:	4b1b      	ldr	r3, [pc, #108]	; (80444 <SystemInit+0x8c>)
   803d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   803da:	f013 0f01 	tst.w	r3, #1
   803de:	d0fa      	beq.n	803d6 <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   803e0:	4a1a      	ldr	r2, [pc, #104]	; (8044c <SystemInit+0x94>)
   803e2:	4b18      	ldr	r3, [pc, #96]	; (80444 <SystemInit+0x8c>)
   803e4:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   803e6:	4b17      	ldr	r3, [pc, #92]	; (80444 <SystemInit+0x8c>)
   803e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   803ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   803ee:	d0fa      	beq.n	803e6 <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   803f0:	4a14      	ldr	r2, [pc, #80]	; (80444 <SystemInit+0x8c>)
   803f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   803f4:	f023 0303 	bic.w	r3, r3, #3
   803f8:	f043 0301 	orr.w	r3, r3, #1
   803fc:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   803fe:	4b11      	ldr	r3, [pc, #68]	; (80444 <SystemInit+0x8c>)
   80400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80402:	f013 0f08 	tst.w	r3, #8
   80406:	d0fa      	beq.n	803fe <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80408:	4a11      	ldr	r2, [pc, #68]	; (80450 <SystemInit+0x98>)
   8040a:	4b0e      	ldr	r3, [pc, #56]	; (80444 <SystemInit+0x8c>)
   8040c:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   8040e:	4b0d      	ldr	r3, [pc, #52]	; (80444 <SystemInit+0x8c>)
   80410:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80412:	f013 0f02 	tst.w	r3, #2
   80416:	d0fa      	beq.n	8040e <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80418:	2211      	movs	r2, #17
   8041a:	4b0a      	ldr	r3, [pc, #40]	; (80444 <SystemInit+0x8c>)
   8041c:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8041e:	4b09      	ldr	r3, [pc, #36]	; (80444 <SystemInit+0x8c>)
   80420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80422:	f013 0f08 	tst.w	r3, #8
   80426:	d0fa      	beq.n	8041e <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80428:	2212      	movs	r2, #18
   8042a:	4b06      	ldr	r3, [pc, #24]	; (80444 <SystemInit+0x8c>)
   8042c:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8042e:	4b05      	ldr	r3, [pc, #20]	; (80444 <SystemInit+0x8c>)
   80430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80432:	f013 0f08 	tst.w	r3, #8
   80436:	d0fa      	beq.n	8042e <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80438:	4a06      	ldr	r2, [pc, #24]	; (80454 <SystemInit+0x9c>)
   8043a:	4b07      	ldr	r3, [pc, #28]	; (80458 <SystemInit+0xa0>)
   8043c:	601a      	str	r2, [r3, #0]
   8043e:	4770      	bx	lr
   80440:	400e0a00 	.word	0x400e0a00
   80444:	400e0600 	.word	0x400e0600
   80448:	00370809 	.word	0x00370809
   8044c:	01370809 	.word	0x01370809
   80450:	200d3f01 	.word	0x200d3f01
   80454:	0501bd00 	.word	0x0501bd00
   80458:	20000000 	.word	0x20000000

0008045c <main>:
volatile uint16_t adc_data;
volatile bool score_toggle;


int main(void)
{
   8045c:	b510      	push	{r4, lr}
   8045e:	b086      	sub	sp, #24
	SystemInit();					//Initialize the SAM system
   80460:	4b3a      	ldr	r3, [pc, #232]	; (8054c <main+0xf0>)
   80462:	4798      	blx	r3
	WDT->WDT_MR |= WDT_MR_WDDIS;	//Disable watchdog timer
   80464:	4a3a      	ldr	r2, [pc, #232]	; (80550 <main+0xf4>)
   80466:	6853      	ldr	r3, [r2, #4]
   80468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   8046c:	6053      	str	r3, [r2, #4]
	PMC->PMC_WPMR &= ~(0x1);		//WPEN bit clear for PIO write protect mode register 
   8046e:	f5a2 52a2 	sub.w	r2, r2, #5184	; 0x1440
   80472:	3a10      	subs	r2, #16
   80474:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   80478:	f023 0301 	bic.w	r3, r3, #1
   8047c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	led_init();						
   80480:	4b34      	ldr	r3, [pc, #208]	; (80554 <main+0xf8>)
   80482:	4798      	blx	r3
	configure_uart();				//Baudrate = master clock / (16 * clock divider) = 84MHz / (16 * 547) = 9600
   80484:	4b34      	ldr	r3, [pc, #208]	; (80558 <main+0xfc>)
   80486:	4798      	blx	r3
	can_init_def_tx_rx_mb(CAN_BAUDRATE);
   80488:	4834      	ldr	r0, [pc, #208]	; (8055c <main+0x100>)
   8048a:	4b35      	ldr	r3, [pc, #212]	; (80560 <main+0x104>)
   8048c:	4798      	blx	r3
	
	pwm_init();
   8048e:	4b35      	ldr	r3, [pc, #212]	; (80564 <main+0x108>)
   80490:	4798      	blx	r3
	adc_init();
   80492:	4b35      	ldr	r3, [pc, #212]	; (80568 <main+0x10c>)
   80494:	4798      	blx	r3
	dac_init();
   80496:	4b35      	ldr	r3, [pc, #212]	; (8056c <main+0x110>)
   80498:	4798      	blx	r3
	sysTick_init();
   8049a:	4b35      	ldr	r3, [pc, #212]	; (80570 <main+0x114>)
   8049c:	4798      	blx	r3
	motor_init();
   8049e:	4b35      	ldr	r3, [pc, #212]	; (80574 <main+0x118>)
   804a0:	4798      	blx	r3
	
	//CAN message

	CAN_MESSAGE rec;
	char msg_str[10];
	score_toggle = 0;
   804a2:	2200      	movs	r2, #0
   804a4:	4b34      	ldr	r3, [pc, #208]	; (80578 <main+0x11c>)
   804a6:	701a      	strb	r2, [r3, #0]
   804a8:	e01a      	b.n	804e0 <main+0x84>
		
		//printf("ADC: %d \r\n", adc_data);
		
		//&& (adc_last_data < goal_threshold_falling)
		if ((adc_data < goal_threshold_falling)  && score_toggle==0) {
			score += 1;
   804aa:	4a34      	ldr	r2, [pc, #208]	; (8057c <main+0x120>)
   804ac:	7813      	ldrb	r3, [r2, #0]
   804ae:	3301      	adds	r3, #1
   804b0:	b2db      	uxtb	r3, r3
   804b2:	7013      	strb	r3, [r2, #0]
			score_toggle = 1;
   804b4:	2101      	movs	r1, #1
   804b6:	4b30      	ldr	r3, [pc, #192]	; (80578 <main+0x11c>)
   804b8:	7019      	strb	r1, [r3, #0]
			printf("Goal! current score: %d \r\n", score);
   804ba:	7811      	ldrb	r1, [r2, #0]
   804bc:	4830      	ldr	r0, [pc, #192]	; (80580 <main+0x124>)
   804be:	4b31      	ldr	r3, [pc, #196]	; (80584 <main+0x128>)
   804c0:	4798      	blx	r3
   804c2:	e035      	b.n	80530 <main+0xd4>
		//&& (adc_last_data > goal_threshold_rising)
		if ((adc_data > goal_threshold_rising)  && score_toggle==1) {
			score_toggle = 0;
		}
		
		int8_t dac_data = rec.data[0];
   804c4:	f99d 400f 	ldrsb.w	r4, [sp, #15]
		dac_write(dac_data);
   804c8:	4620      	mov	r0, r4
   804ca:	4b2f      	ldr	r3, [pc, #188]	; (80588 <main+0x12c>)
   804cc:	4798      	blx	r3
		//printf("CAN Data %d \t",  rec.data[0]);
		printf("DATA0: %d \t", dac_data);
   804ce:	4621      	mov	r1, r4
   804d0:	482e      	ldr	r0, [pc, #184]	; (8058c <main+0x130>)
   804d2:	4c2c      	ldr	r4, [pc, #176]	; (80584 <main+0x128>)
   804d4:	47a0      	blx	r4
		
		int16_t enc_data= read_encoder();
   804d6:	4b2e      	ldr	r3, [pc, #184]	; (80590 <main+0x134>)
   804d8:	4798      	blx	r3
		printf("Encoder: %d \r\n", enc_data);
   804da:	4601      	mov	r1, r0
   804dc:	482d      	ldr	r0, [pc, #180]	; (80594 <main+0x138>)
   804de:	47a0      	blx	r4
		can_receive(&rec, 0);
   804e0:	2100      	movs	r1, #0
   804e2:	a803      	add	r0, sp, #12
   804e4:	4b2c      	ldr	r3, [pc, #176]	; (80598 <main+0x13c>)
   804e6:	4798      	blx	r3
		itoa((int8_t)rec.data[0], msg_str, 10);
   804e8:	220a      	movs	r2, #10
   804ea:	4669      	mov	r1, sp
   804ec:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   804f0:	4c2a      	ldr	r4, [pc, #168]	; (8059c <main+0x140>)
   804f2:	47a0      	blx	r4
		printf("x: %s\t", msg_str);
   804f4:	4669      	mov	r1, sp
   804f6:	482a      	ldr	r0, [pc, #168]	; (805a0 <main+0x144>)
   804f8:	4b22      	ldr	r3, [pc, #136]	; (80584 <main+0x128>)
   804fa:	4798      	blx	r3
		itoa((int8_t)rec.data[1], msg_str, 10);
   804fc:	220a      	movs	r2, #10
   804fe:	4669      	mov	r1, sp
   80500:	f99d 0010 	ldrsb.w	r0, [sp, #16]
   80504:	47a0      	blx	r4
		pwm_joystick(&rec, 1);
   80506:	2101      	movs	r1, #1
   80508:	a803      	add	r0, sp, #12
   8050a:	4b26      	ldr	r3, [pc, #152]	; (805a4 <main+0x148>)
   8050c:	4798      	blx	r3
		adc_last_data= adc_data;
   8050e:	4c26      	ldr	r4, [pc, #152]	; (805a8 <main+0x14c>)
   80510:	8823      	ldrh	r3, [r4, #0]
   80512:	b29b      	uxth	r3, r3
   80514:	4a25      	ldr	r2, [pc, #148]	; (805ac <main+0x150>)
   80516:	8013      	strh	r3, [r2, #0]
		adc_data = adc_read();
   80518:	4b25      	ldr	r3, [pc, #148]	; (805b0 <main+0x154>)
   8051a:	4798      	blx	r3
   8051c:	8020      	strh	r0, [r4, #0]
		if ((adc_data < goal_threshold_falling)  && score_toggle==0) {
   8051e:	8823      	ldrh	r3, [r4, #0]
   80520:	b29b      	uxth	r3, r3
   80522:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   80526:	d203      	bcs.n	80530 <main+0xd4>
   80528:	4b13      	ldr	r3, [pc, #76]	; (80578 <main+0x11c>)
   8052a:	781b      	ldrb	r3, [r3, #0]
   8052c:	2b00      	cmp	r3, #0
   8052e:	d0bc      	beq.n	804aa <main+0x4e>
		if ((adc_data > goal_threshold_rising)  && score_toggle==1) {
   80530:	4b1d      	ldr	r3, [pc, #116]	; (805a8 <main+0x14c>)
   80532:	881b      	ldrh	r3, [r3, #0]
   80534:	b29b      	uxth	r3, r3
   80536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8053a:	d9c3      	bls.n	804c4 <main+0x68>
   8053c:	4b0e      	ldr	r3, [pc, #56]	; (80578 <main+0x11c>)
   8053e:	781b      	ldrb	r3, [r3, #0]
   80540:	2b00      	cmp	r3, #0
   80542:	d0bf      	beq.n	804c4 <main+0x68>
			score_toggle = 0;
   80544:	2200      	movs	r2, #0
   80546:	4b0c      	ldr	r3, [pc, #48]	; (80578 <main+0x11c>)
   80548:	701a      	strb	r2, [r3, #0]
   8054a:	e7bb      	b.n	804c4 <main+0x68>
   8054c:	000803b9 	.word	0x000803b9
   80550:	400e1a50 	.word	0x400e1a50
   80554:	00080969 	.word	0x00080969
   80558:	00080b4d 	.word	0x00080b4d
   8055c:	00290165 	.word	0x00290165
   80560:	00080245 	.word	0x00080245
   80564:	00080a45 	.word	0x00080a45
   80568:	00080869 	.word	0x00080869
   8056c:	000808a9 	.word	0x000808a9
   80570:	00080935 	.word	0x00080935
   80574:	000809e5 	.word	0x000809e5
   80578:	20000454 	.word	0x20000454
   8057c:	20000450 	.word	0x20000450
   80580:	00080e98 	.word	0x00080e98
   80584:	00080845 	.word	0x00080845
   80588:	00080909 	.word	0x00080909
   8058c:	00080eb4 	.word	0x00080eb4
   80590:	00080991 	.word	0x00080991
   80594:	00080ec0 	.word	0x00080ec0
   80598:	00080255 	.word	0x00080255
   8059c:	00080cc1 	.word	0x00080cc1
   805a0:	00080e90 	.word	0x00080e90
   805a4:	00080acd 	.word	0x00080acd
   805a8:	20000452 	.word	0x20000452
   805ac:	20000456 	.word	0x20000456
   805b0:	0008089d 	.word	0x0008089d

000805b4 <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   805b4:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   805b6:	b2c8      	uxtb	r0, r1
   805b8:	4b01      	ldr	r3, [pc, #4]	; (805c0 <printchar+0xc>)
   805ba:	4798      	blx	r3
   805bc:	bd08      	pop	{r3, pc}
   805be:	bf00      	nop
   805c0:	00080bb5 	.word	0x00080bb5

000805c4 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   805c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   805c8:	4607      	mov	r7, r0
   805ca:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   805cc:	1e15      	subs	r5, r2, #0
   805ce:	dd02      	ble.n	805d6 <prints+0x12>
   805d0:	460a      	mov	r2, r1
   805d2:	2100      	movs	r1, #0
   805d4:	e004      	b.n	805e0 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   805d6:	f04f 0820 	mov.w	r8, #32
   805da:	e00e      	b.n	805fa <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   805dc:	3101      	adds	r1, #1
   805de:	3201      	adds	r2, #1
   805e0:	7810      	ldrb	r0, [r2, #0]
   805e2:	2800      	cmp	r0, #0
   805e4:	d1fa      	bne.n	805dc <prints+0x18>
		if (len >= width) width = 0;
   805e6:	42a9      	cmp	r1, r5
   805e8:	da01      	bge.n	805ee <prints+0x2a>
		else width -= len;
   805ea:	1a6d      	subs	r5, r5, r1
   805ec:	e000      	b.n	805f0 <prints+0x2c>
		if (len >= width) width = 0;
   805ee:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   805f0:	f013 0f02 	tst.w	r3, #2
   805f4:	d106      	bne.n	80604 <prints+0x40>
	register int pc = 0, padchar = ' ';
   805f6:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   805fa:	f013 0401 	ands.w	r4, r3, #1
   805fe:	d00a      	beq.n	80616 <prints+0x52>
	register int pc = 0, padchar = ' ';
   80600:	2400      	movs	r4, #0
   80602:	e010      	b.n	80626 <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   80604:	f04f 0830 	mov.w	r8, #48	; 0x30
   80608:	e7f7      	b.n	805fa <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   8060a:	4641      	mov	r1, r8
   8060c:	4638      	mov	r0, r7
   8060e:	4b0d      	ldr	r3, [pc, #52]	; (80644 <prints+0x80>)
   80610:	4798      	blx	r3
			++pc;
   80612:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   80614:	3d01      	subs	r5, #1
   80616:	2d00      	cmp	r5, #0
   80618:	dcf7      	bgt.n	8060a <prints+0x46>
   8061a:	e004      	b.n	80626 <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   8061c:	4638      	mov	r0, r7
   8061e:	4b09      	ldr	r3, [pc, #36]	; (80644 <prints+0x80>)
   80620:	4798      	blx	r3
		++pc;
   80622:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80624:	3601      	adds	r6, #1
   80626:	7831      	ldrb	r1, [r6, #0]
   80628:	2900      	cmp	r1, #0
   8062a:	d1f7      	bne.n	8061c <prints+0x58>
   8062c:	e005      	b.n	8063a <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   8062e:	4641      	mov	r1, r8
   80630:	4638      	mov	r0, r7
   80632:	4b04      	ldr	r3, [pc, #16]	; (80644 <prints+0x80>)
   80634:	4798      	blx	r3
		++pc;
   80636:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   80638:	3d01      	subs	r5, #1
   8063a:	2d00      	cmp	r5, #0
   8063c:	dcf7      	bgt.n	8062e <prints+0x6a>
	}

	return pc;
}
   8063e:	4620      	mov	r0, r4
   80640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80644:	000805b5 	.word	0x000805b5

00080648 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80648:	b5f0      	push	{r4, r5, r6, r7, lr}
   8064a:	b085      	sub	sp, #20
   8064c:	4607      	mov	r7, r0
   8064e:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80650:	b151      	cbz	r1, 80668 <printi+0x20>
   80652:	461e      	mov	r6, r3
   80654:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80656:	b113      	cbz	r3, 8065e <printi+0x16>
   80658:	2a0a      	cmp	r2, #10
   8065a:	d012      	beq.n	80682 <printi+0x3a>
	register int t, neg = 0, pc = 0;
   8065c:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   8065e:	ad04      	add	r5, sp, #16
   80660:	2300      	movs	r3, #0
   80662:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   80666:	e018      	b.n	8069a <printi+0x52>
		print_buf[0] = '0';
   80668:	2330      	movs	r3, #48	; 0x30
   8066a:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   8066e:	2300      	movs	r3, #0
   80670:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80676:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80678:	a901      	add	r1, sp, #4
   8067a:	4638      	mov	r0, r7
   8067c:	4c1b      	ldr	r4, [pc, #108]	; (806ec <printi+0xa4>)
   8067e:	47a0      	blx	r4
   80680:	e029      	b.n	806d6 <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   80682:	2900      	cmp	r1, #0
   80684:	db01      	blt.n	8068a <printi+0x42>
	register int t, neg = 0, pc = 0;
   80686:	2600      	movs	r6, #0
   80688:	e7e9      	b.n	8065e <printi+0x16>
		u = -i;
   8068a:	424c      	negs	r4, r1
		neg = 1;
   8068c:	2601      	movs	r6, #1
   8068e:	e7e6      	b.n	8065e <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   80690:	3330      	adds	r3, #48	; 0x30
   80692:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80696:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   8069a:	b14c      	cbz	r4, 806b0 <printi+0x68>
		t = u % b;
   8069c:	fbb4 f3f2 	udiv	r3, r4, r2
   806a0:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   806a4:	2b09      	cmp	r3, #9
   806a6:	ddf3      	ble.n	80690 <printi+0x48>
			t += letbase - '0' - 10;
   806a8:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   806ac:	440b      	add	r3, r1
   806ae:	e7ef      	b.n	80690 <printi+0x48>
	}

	if (neg) {
   806b0:	b156      	cbz	r6, 806c8 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   806b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   806b4:	b11b      	cbz	r3, 806be <printi+0x76>
   806b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806b8:	f013 0f02 	tst.w	r3, #2
   806bc:	d10d      	bne.n	806da <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   806be:	232d      	movs	r3, #45	; 0x2d
   806c0:	f805 3c01 	strb.w	r3, [r5, #-1]
   806c4:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   806c6:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   806c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   806cc:	4629      	mov	r1, r5
   806ce:	4638      	mov	r0, r7
   806d0:	4c06      	ldr	r4, [pc, #24]	; (806ec <printi+0xa4>)
   806d2:	47a0      	blx	r4
   806d4:	4430      	add	r0, r6
}
   806d6:	b005      	add	sp, #20
   806d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   806da:	212d      	movs	r1, #45	; 0x2d
   806dc:	4638      	mov	r0, r7
   806de:	4b04      	ldr	r3, [pc, #16]	; (806f0 <printi+0xa8>)
   806e0:	4798      	blx	r3
			--width;
   806e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   806e4:	3b01      	subs	r3, #1
   806e6:	930a      	str	r3, [sp, #40]	; 0x28
   806e8:	e7ee      	b.n	806c8 <printi+0x80>
   806ea:	bf00      	nop
   806ec:	000805c5 	.word	0x000805c5
   806f0:	000805b5 	.word	0x000805b5

000806f4 <print>:

static int print( char **out, const char *format, va_list args )
{
   806f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   806f6:	b089      	sub	sp, #36	; 0x24
   806f8:	4606      	mov	r6, r0
   806fa:	460c      	mov	r4, r1
   806fc:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   806fe:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   80700:	e081      	b.n	80806 <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   80702:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   80704:	2301      	movs	r3, #1
   80706:	e08b      	b.n	80820 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   80708:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   8070a:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   8070e:	7822      	ldrb	r2, [r4, #0]
   80710:	2a30      	cmp	r2, #48	; 0x30
   80712:	d0f9      	beq.n	80708 <print+0x14>
   80714:	2200      	movs	r2, #0
   80716:	e006      	b.n	80726 <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   80718:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8071c:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   8071e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80722:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80724:	3401      	adds	r4, #1
   80726:	7821      	ldrb	r1, [r4, #0]
   80728:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   8072c:	b2c0      	uxtb	r0, r0
   8072e:	2809      	cmp	r0, #9
   80730:	d9f2      	bls.n	80718 <print+0x24>
			}
			if( *format == 's' ) {
   80732:	2973      	cmp	r1, #115	; 0x73
   80734:	d018      	beq.n	80768 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   80736:	2964      	cmp	r1, #100	; 0x64
   80738:	d022      	beq.n	80780 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   8073a:	2978      	cmp	r1, #120	; 0x78
   8073c:	d02f      	beq.n	8079e <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   8073e:	2958      	cmp	r1, #88	; 0x58
   80740:	d03c      	beq.n	807bc <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   80742:	2975      	cmp	r1, #117	; 0x75
   80744:	d049      	beq.n	807da <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   80746:	2963      	cmp	r1, #99	; 0x63
   80748:	d15c      	bne.n	80804 <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   8074a:	9905      	ldr	r1, [sp, #20]
   8074c:	1d08      	adds	r0, r1, #4
   8074e:	9005      	str	r0, [sp, #20]
   80750:	7809      	ldrb	r1, [r1, #0]
   80752:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   80756:	2100      	movs	r1, #0
   80758:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   8075c:	a907      	add	r1, sp, #28
   8075e:	4630      	mov	r0, r6
   80760:	4f34      	ldr	r7, [pc, #208]	; (80834 <print+0x140>)
   80762:	47b8      	blx	r7
   80764:	4405      	add	r5, r0
				continue;
   80766:	e04d      	b.n	80804 <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80768:	9905      	ldr	r1, [sp, #20]
   8076a:	1d08      	adds	r0, r1, #4
   8076c:	9005      	str	r0, [sp, #20]
   8076e:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80770:	b121      	cbz	r1, 8077c <print+0x88>
   80772:	4630      	mov	r0, r6
   80774:	4f2f      	ldr	r7, [pc, #188]	; (80834 <print+0x140>)
   80776:	47b8      	blx	r7
   80778:	4405      	add	r5, r0
				continue;
   8077a:	e043      	b.n	80804 <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   8077c:	492e      	ldr	r1, [pc, #184]	; (80838 <print+0x144>)
   8077e:	e7f8      	b.n	80772 <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80780:	9905      	ldr	r1, [sp, #20]
   80782:	1d08      	adds	r0, r1, #4
   80784:	9005      	str	r0, [sp, #20]
   80786:	6809      	ldr	r1, [r1, #0]
   80788:	2061      	movs	r0, #97	; 0x61
   8078a:	9002      	str	r0, [sp, #8]
   8078c:	9301      	str	r3, [sp, #4]
   8078e:	9200      	str	r2, [sp, #0]
   80790:	2301      	movs	r3, #1
   80792:	220a      	movs	r2, #10
   80794:	4630      	mov	r0, r6
   80796:	4f29      	ldr	r7, [pc, #164]	; (8083c <print+0x148>)
   80798:	47b8      	blx	r7
   8079a:	4405      	add	r5, r0
				continue;
   8079c:	e032      	b.n	80804 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   8079e:	9905      	ldr	r1, [sp, #20]
   807a0:	1d08      	adds	r0, r1, #4
   807a2:	9005      	str	r0, [sp, #20]
   807a4:	6809      	ldr	r1, [r1, #0]
   807a6:	2061      	movs	r0, #97	; 0x61
   807a8:	9002      	str	r0, [sp, #8]
   807aa:	9301      	str	r3, [sp, #4]
   807ac:	9200      	str	r2, [sp, #0]
   807ae:	2300      	movs	r3, #0
   807b0:	2210      	movs	r2, #16
   807b2:	4630      	mov	r0, r6
   807b4:	4f21      	ldr	r7, [pc, #132]	; (8083c <print+0x148>)
   807b6:	47b8      	blx	r7
   807b8:	4405      	add	r5, r0
				continue;
   807ba:	e023      	b.n	80804 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   807bc:	9905      	ldr	r1, [sp, #20]
   807be:	1d08      	adds	r0, r1, #4
   807c0:	9005      	str	r0, [sp, #20]
   807c2:	6809      	ldr	r1, [r1, #0]
   807c4:	2041      	movs	r0, #65	; 0x41
   807c6:	9002      	str	r0, [sp, #8]
   807c8:	9301      	str	r3, [sp, #4]
   807ca:	9200      	str	r2, [sp, #0]
   807cc:	2300      	movs	r3, #0
   807ce:	2210      	movs	r2, #16
   807d0:	4630      	mov	r0, r6
   807d2:	4f1a      	ldr	r7, [pc, #104]	; (8083c <print+0x148>)
   807d4:	47b8      	blx	r7
   807d6:	4405      	add	r5, r0
				continue;
   807d8:	e014      	b.n	80804 <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   807da:	9905      	ldr	r1, [sp, #20]
   807dc:	1d08      	adds	r0, r1, #4
   807de:	9005      	str	r0, [sp, #20]
   807e0:	6809      	ldr	r1, [r1, #0]
   807e2:	2061      	movs	r0, #97	; 0x61
   807e4:	9002      	str	r0, [sp, #8]
   807e6:	9301      	str	r3, [sp, #4]
   807e8:	9200      	str	r2, [sp, #0]
   807ea:	2300      	movs	r3, #0
   807ec:	220a      	movs	r2, #10
   807ee:	4630      	mov	r0, r6
   807f0:	4f12      	ldr	r7, [pc, #72]	; (8083c <print+0x148>)
   807f2:	47b8      	blx	r7
   807f4:	4405      	add	r5, r0
				continue;
   807f6:	e005      	b.n	80804 <print+0x110>
			++format;
   807f8:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   807fa:	7821      	ldrb	r1, [r4, #0]
   807fc:	4630      	mov	r0, r6
   807fe:	4b10      	ldr	r3, [pc, #64]	; (80840 <print+0x14c>)
   80800:	4798      	blx	r3
			++pc;
   80802:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   80804:	3401      	adds	r4, #1
   80806:	7823      	ldrb	r3, [r4, #0]
   80808:	b163      	cbz	r3, 80824 <print+0x130>
		if (*format == '%') {
   8080a:	2b25      	cmp	r3, #37	; 0x25
   8080c:	d1f5      	bne.n	807fa <print+0x106>
			++format;
   8080e:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   80810:	7863      	ldrb	r3, [r4, #1]
   80812:	b13b      	cbz	r3, 80824 <print+0x130>
			if (*format == '%') goto out;
   80814:	2b25      	cmp	r3, #37	; 0x25
   80816:	d0ef      	beq.n	807f8 <print+0x104>
			if (*format == '-') {
   80818:	2b2d      	cmp	r3, #45	; 0x2d
   8081a:	f43f af72 	beq.w	80702 <print+0xe>
			width = pad = 0;
   8081e:	2300      	movs	r3, #0
   80820:	4614      	mov	r4, r2
   80822:	e774      	b.n	8070e <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80824:	b116      	cbz	r6, 8082c <print+0x138>
   80826:	6833      	ldr	r3, [r6, #0]
   80828:	2200      	movs	r2, #0
   8082a:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   8082c:	4628      	mov	r0, r5
   8082e:	b009      	add	sp, #36	; 0x24
   80830:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80832:	bf00      	nop
   80834:	000805c5 	.word	0x000805c5
   80838:	00080ed0 	.word	0x00080ed0
   8083c:	00080649 	.word	0x00080649
   80840:	000805b5 	.word	0x000805b5

00080844 <printf>:

int printf(const char *format, ...)
{
   80844:	b40f      	push	{r0, r1, r2, r3}
   80846:	b500      	push	{lr}
   80848:	b083      	sub	sp, #12
   8084a:	aa04      	add	r2, sp, #16
   8084c:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80850:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80852:	2000      	movs	r0, #0
   80854:	4b03      	ldr	r3, [pc, #12]	; (80864 <printf+0x20>)
   80856:	4798      	blx	r3
}
   80858:	b003      	add	sp, #12
   8085a:	f85d eb04 	ldr.w	lr, [sp], #4
   8085e:	b004      	add	sp, #16
   80860:	4770      	bx	lr
   80862:	bf00      	nop
   80864:	000806f5 	.word	0x000806f5

00080868 <adc_init>:
#include "sam_adc.h"

void adc_init() {
	PMC->PMC_PCER1 |= PMC_PCER1_PID37;		//Enable peripheral ADC controller
   80868:	4a0a      	ldr	r2, [pc, #40]	; (80894 <adc_init+0x2c>)
   8086a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   8086e:	f043 0320 	orr.w	r3, r3, #32
   80872:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	ADC->ADC_MR |= ADC_MR_FREERUN;			//Enable free run mode (never wait for any trigger)
   80876:	4b08      	ldr	r3, [pc, #32]	; (80898 <adc_init+0x30>)
   80878:	685a      	ldr	r2, [r3, #4]
   8087a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8087e:	605a      	str	r2, [r3, #4]
	ADC->ADC_CHER |= ADC_CHER_CH0;			//Enable ADC channel 0 => PA2 -> AD7 -> pin 8 analog P2 
   80880:	691a      	ldr	r2, [r3, #16]
   80882:	f042 0201 	orr.w	r2, r2, #1
   80886:	611a      	str	r2, [r3, #16]
	ADC->ADC_CR |= ADC_CR_START;			//Start analog to digital conversion
   80888:	681a      	ldr	r2, [r3, #0]
   8088a:	f042 0202 	orr.w	r2, r2, #2
   8088e:	601a      	str	r2, [r3, #0]
   80890:	4770      	bx	lr
   80892:	bf00      	nop
   80894:	400e0600 	.word	0x400e0600
   80898:	400c0000 	.word	0x400c0000

0008089c <adc_read>:
}

uint16_t adc_read() {
	return ADC->ADC_CDR[0];					//Return data from ADC channel 0
   8089c:	4b01      	ldr	r3, [pc, #4]	; (808a4 <adc_read+0x8>)
   8089e:	6d18      	ldr	r0, [r3, #80]	; 0x50
}
   808a0:	b280      	uxth	r0, r0
   808a2:	4770      	bx	lr
   808a4:	400c0000 	.word	0x400c0000

000808a8 <dac_init>:
#include "sam_dac.h"

void dac_init(){
	
	PMC->PMC_PCER1 |= PMC_PCER1_PID38;		//Enable peripheral DAC controller //ADC1 : PIN77 PB16 
   808a8:	4a08      	ldr	r2, [pc, #32]	; (808cc <dac_init+0x24>)
   808aa:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   808ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   808b2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	DACC-> DACC_MR		|= (DACC_MR_TRGEN_DIS)			//DACC in Free running Mode	
   808b6:	f5a2 32c3 	sub.w	r2, r2, #99840	; 0x18600
   808ba:	6853      	ldr	r3, [r2, #4]
   808bc:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
   808c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   808c4:	6053      	str	r3, [r2, #4]
						| (DACC_MR_WORD_HALF)			//16bit input mode
						| (DACC_MR_MAXS_MAXIMUM)		//MAX speed mode enabled
						| (DACC_MR_STARTUP_1024)
						| (DACC_MR_USER_SEL_CHANNEL1);	//Channel 1 Select => PB16 -> DAC1
	
	DACC-> DACC_CHER	= (DACC_CHDR_CH1);				//DAC Channel 1 Enable
   808c6:	2302      	movs	r3, #2
   808c8:	6113      	str	r3, [r2, #16]
   808ca:	4770      	bx	lr
   808cc:	400e0600 	.word	0x400e0600

000808d0 <dac_write_raw>:
}


void dac_write_raw(uint16_t data){
   808d0:	b508      	push	{r3, lr}
   808d2:	4601      	mov	r1, r0
	DACC-> DACC_CDR = (data<<4);
   808d4:	0102      	lsls	r2, r0, #4
   808d6:	4b03      	ldr	r3, [pc, #12]	; (808e4 <dac_write_raw+0x14>)
   808d8:	621a      	str	r2, [r3, #32]
	printf("DAC_WRITE: %08x \t", data);
   808da:	4803      	ldr	r0, [pc, #12]	; (808e8 <dac_write_raw+0x18>)
   808dc:	4b03      	ldr	r3, [pc, #12]	; (808ec <dac_write_raw+0x1c>)
   808de:	4798      	blx	r3
   808e0:	bd08      	pop	{r3, pc}
   808e2:	bf00      	nop
   808e4:	400c8000 	.word	0x400c8000
   808e8:	00080ed8 	.word	0x00080ed8
   808ec:	00080845 	.word	0x00080845

000808f0 <map>:

void dac_write(int16_t data){
	dac_write_raw(map(data, -100, 100, 0, 0xFF));
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
   808f0:	b410      	push	{r4}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
   808f2:	1a40      	subs	r0, r0, r1
   808f4:	9c01      	ldr	r4, [sp, #4]
   808f6:	1ae4      	subs	r4, r4, r3
   808f8:	fb04 f000 	mul.w	r0, r4, r0
   808fc:	1a52      	subs	r2, r2, r1
   808fe:	fb90 f0f2 	sdiv	r0, r0, r2
   80902:	4418      	add	r0, r3
   80904:	bc10      	pop	{r4}
   80906:	4770      	bx	lr

00080908 <dac_write>:
void dac_write(int16_t data){
   80908:	b510      	push	{r4, lr}
   8090a:	b082      	sub	sp, #8
	dac_write_raw(map(data, -100, 100, 0, 0xFF));
   8090c:	23ff      	movs	r3, #255	; 0xff
   8090e:	9300      	str	r3, [sp, #0]
   80910:	2300      	movs	r3, #0
   80912:	2264      	movs	r2, #100	; 0x64
   80914:	f06f 0163 	mvn.w	r1, #99	; 0x63
   80918:	4c03      	ldr	r4, [pc, #12]	; (80928 <dac_write+0x20>)
   8091a:	47a0      	blx	r4
   8091c:	b280      	uxth	r0, r0
   8091e:	4b03      	ldr	r3, [pc, #12]	; (8092c <dac_write+0x24>)
   80920:	4798      	blx	r3
}
   80922:	b002      	add	sp, #8
   80924:	bd10      	pop	{r4, pc}
   80926:	bf00      	nop
   80928:	000808f1 	.word	0x000808f1
   8092c:	000808d1 	.word	0x000808d1

00080930 <SysTick_Handler>:
#include "sam_delay.h"

void SysTick_Handler() {
   80930:	4770      	bx	lr
	...

00080934 <sysTick_init>:
}

void sysTick_init(){
	SysTick->LOAD = (84000000U / 1000000U) - 1;																//84Mhz clock and 1 us period -> 1MHz => 84 ticks per us
   80934:	4b03      	ldr	r3, [pc, #12]	; (80944 <sysTick_init+0x10>)
   80936:	2253      	movs	r2, #83	; 0x53
   80938:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;																						//Current value of SysTick counter
   8093a:	2200      	movs	r2, #0
   8093c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = (SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk);		//use MCK clock source, counting down to zero to asserts the SysTick exception request and enable counter
   8093e:	2207      	movs	r2, #7
   80940:	601a      	str	r2, [r3, #0]
   80942:	4770      	bx	lr
   80944:	e000e010 	.word	0xe000e010

00080948 <delay_us>:
}

void delay_us(uint32_t us) {
	SysTick->LOAD =(84000000U / 1000000U) * us - 1;
   80948:	2354      	movs	r3, #84	; 0x54
   8094a:	fb03 f000 	mul.w	r0, r3, r0
   8094e:	3801      	subs	r0, #1
   80950:	4b04      	ldr	r3, [pc, #16]	; (80964 <delay_us+0x1c>)
   80952:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0;
   80954:	2200      	movs	r2, #0
   80956:	609a      	str	r2, [r3, #8]
	while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0) {}
   80958:	4b02      	ldr	r3, [pc, #8]	; (80964 <delay_us+0x1c>)
   8095a:	681b      	ldr	r3, [r3, #0]
   8095c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80960:	d0fa      	beq.n	80958 <delay_us+0x10>
   80962:	4770      	bx	lr
   80964:	e000e010 	.word	0xe000e010

00080968 <led_init>:
//Led D1 -> pin42 -> PA19
//Led D2 -> pin43 -> PA20

void led_init() {
	//Enable peripheral control register
	PMC->PMC_PCR |=  PMC_PCR_EN;
   80968:	4a07      	ldr	r2, [pc, #28]	; (80988 <led_init+0x20>)
   8096a:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   8096e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   80972:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	//Parallel input/output enable for led D1 and D2
	PIOA ->PIO_PER = (PIO_PER_P19 | PIO_PER_P20);
   80976:	4b05      	ldr	r3, [pc, #20]	; (8098c <led_init+0x24>)
   80978:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   8097c:	601a      	str	r2, [r3, #0]
	//Output enable
	PIOA->PIO_OER = (PIO_OER_P19 | PIO_OER_P20);
   8097e:	611a      	str	r2, [r3, #16]
	//Clear output data register
	PIOA->PIO_CODR = (PIO_CODR_P19 | PIO_CODR_P20);
   80980:	635a      	str	r2, [r3, #52]	; 0x34
	//Set output register
	PIOA->PIO_SODR = (PIO_SODR_P19 | PIO_SODR_P20);
   80982:	631a      	str	r2, [r3, #48]	; 0x30
   80984:	4770      	bx	lr
   80986:	bf00      	nop
   80988:	400e0600 	.word	0x400e0600
   8098c:	400e0e00 	.word	0x400e0e00

00080990 <read_encoder>:
	PIOD->PIO_CODR |= NOT_OE;									//Encoder output enable
			
	restart_encoder();
}

int16_t read_encoder() {
   80990:	b570      	push	{r4, r5, r6, lr}
	int16_t encoder_value;
	PIOD->PIO_CODR = (NOT_OE | SEL);						//Set !OE and SEL to low
   80992:	4d0b      	ldr	r5, [pc, #44]	; (809c0 <read_encoder+0x30>)
   80994:	2305      	movs	r3, #5
   80996:	636b      	str	r3, [r5, #52]	; 0x34
	delay_us(20);
   80998:	2014      	movs	r0, #20
   8099a:	4e0a      	ldr	r6, [pc, #40]	; (809c4 <read_encoder+0x34>)
   8099c:	47b0      	blx	r6
	int8_t higher_bytes = (PIOD->PIO_PDSR & MJ2) >> 1;		//Read higher bytes from MJ2
   8099e:	6bec      	ldr	r4, [r5, #60]	; 0x3c
   809a0:	f344 0447 	sbfx	r4, r4, #1, #8
	PIOD->PIO_SODR = SEL;									//Set SEL high
   809a4:	2304      	movs	r3, #4
   809a6:	632b      	str	r3, [r5, #48]	; 0x30
	delay_us(20);
   809a8:	2014      	movs	r0, #20
   809aa:	47b0      	blx	r6
	int8_t lower_bytes = (PIOD->PIO_PDSR & MJ2) >> 1;		//Read lower bytes from MJ2
   809ac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   809ae:	f343 0347 	sbfx	r3, r3, #1, #8
	PIOD->PIO_SODR = NOT_OE;								//Set !OE high
   809b2:	2201      	movs	r2, #1
   809b4:	632a      	str	r2, [r5, #48]	; 0x30
	encoder_value = (higher_bytes << 8) + lower_bytes;
   809b6:	0220      	lsls	r0, r4, #8
   809b8:	b280      	uxth	r0, r0
   809ba:	4418      	add	r0, r3
	
	return encoder_value;
}
   809bc:	b200      	sxth	r0, r0
   809be:	bd70      	pop	{r4, r5, r6, pc}
   809c0:	400e1400 	.word	0x400e1400
   809c4:	00080949 	.word	0x00080949

000809c8 <restart_encoder>:

void restart_encoder() {
   809c8:	b538      	push	{r3, r4, r5, lr}
	PIOD->PIO_CODR = NOT_RST;								//Enable encoder reset
   809ca:	4c04      	ldr	r4, [pc, #16]	; (809dc <restart_encoder+0x14>)
   809cc:	2502      	movs	r5, #2
   809ce:	6365      	str	r5, [r4, #52]	; 0x34
	delay_us(20);
   809d0:	2014      	movs	r0, #20
   809d2:	4b03      	ldr	r3, [pc, #12]	; (809e0 <restart_encoder+0x18>)
   809d4:	4798      	blx	r3
	PIOD->PIO_SODR = NOT_RST;								//Disable encoder reset
   809d6:	6325      	str	r5, [r4, #48]	; 0x30
   809d8:	bd38      	pop	{r3, r4, r5, pc}
   809da:	bf00      	nop
   809dc:	400e1400 	.word	0x400e1400
   809e0:	00080949 	.word	0x00080949

000809e4 <motor_init>:
void motor_init() {
   809e4:	b508      	push	{r3, lr}
	PMC->PMC_PCER0 |= (PMC_PCER0_PID13 | PMC_PCR_EN);			//Enable parallel I/O controller C
   809e6:	4a13      	ldr	r2, [pc, #76]	; (80a34 <motor_init+0x50>)
   809e8:	6913      	ldr	r3, [r2, #16]
   809ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   809ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   809f2:	6113      	str	r3, [r2, #16]
	PIOD->PIO_PER |= (DIR | EN | NOT_OE | SEL);					//PIO enable registers
   809f4:	4b10      	ldr	r3, [pc, #64]	; (80a38 <motor_init+0x54>)
   809f6:	6819      	ldr	r1, [r3, #0]
   809f8:	f240 6005 	movw	r0, #1541	; 0x605
   809fc:	4301      	orrs	r1, r0
   809fe:	6019      	str	r1, [r3, #0]
	PIOD->PIO_OER |= (DIR | EN | NOT_OE | SEL);					//Output enable registers
   80a00:	691a      	ldr	r2, [r3, #16]
   80a02:	4302      	orrs	r2, r0
   80a04:	611a      	str	r2, [r3, #16]
	PIOC->PIO_PER |= MJ2;
   80a06:	4a0d      	ldr	r2, [pc, #52]	; (80a3c <motor_init+0x58>)
   80a08:	6811      	ldr	r1, [r2, #0]
   80a0a:	f441 71ff 	orr.w	r1, r1, #510	; 0x1fe
   80a0e:	6011      	str	r1, [r2, #0]
	PIOC->PIO_ODR |= MJ2;										//Output disable register
   80a10:	6951      	ldr	r1, [r2, #20]
   80a12:	f441 71ff 	orr.w	r1, r1, #510	; 0x1fe
   80a16:	6151      	str	r1, [r2, #20]
	PIOD->PIO_SODR |= (EN | NOT_RST);							//Motor enable and encoder reset disable
   80a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   80a1e:	f042 0202 	orr.w	r2, r2, #2
   80a22:	631a      	str	r2, [r3, #48]	; 0x30
	PIOD->PIO_CODR |= NOT_OE;									//Encoder output enable
   80a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   80a26:	f042 0201 	orr.w	r2, r2, #1
   80a2a:	635a      	str	r2, [r3, #52]	; 0x34
	restart_encoder();
   80a2c:	4b04      	ldr	r3, [pc, #16]	; (80a40 <motor_init+0x5c>)
   80a2e:	4798      	blx	r3
   80a30:	bd08      	pop	{r3, pc}
   80a32:	bf00      	nop
   80a34:	400e0600 	.word	0x400e0600
   80a38:	400e1400 	.word	0x400e1400
   80a3c:	400e1200 	.word	0x400e1200
   80a40:	000809c9 	.word	0x000809c9

00080a44 <pwm_init>:
#include "sam_pwm.h"

void pwm_init() {
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;		//Enable peripheral PWM controller
   80a44:	4a18      	ldr	r2, [pc, #96]	; (80aa8 <pwm_init+0x64>)
   80a46:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80a4a:	f043 0310 	orr.w	r3, r3, #16
   80a4e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	PIOC->PIO_ABSR |= PIO_ABSR_P19;			//Select B peripheral register for PWM waveform output high for channel 5 for PC19 -> pin 44
   80a52:	4b16      	ldr	r3, [pc, #88]	; (80aac <pwm_init+0x68>)
   80a54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80a56:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a5a:	671a      	str	r2, [r3, #112]	; 0x70
	PIOC->PIO_PDR |= PIO_PDR_P19;			//Enables peripheral control of the PC19
   80a5c:	685a      	ldr	r2, [r3, #4]
   80a5e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a62:	605a      	str	r2, [r3, #4]
	
	//Wave period = 1 / 50Hz = (2 * CPRD * DIVA) / MCK -> 50 Hz = MCK / (2 * CPRD * DIVA) = 84MHz / (2 * 20000 * 42) = 50Hz
	PWM->PWM_CLK |= PWM_CLK_PREA(0) | PWM_CLK_DIVA(42);									//Set PWM clock to 2MHz
   80a64:	4b12      	ldr	r3, [pc, #72]	; (80ab0 <pwm_init+0x6c>)
   80a66:	681a      	ldr	r2, [r3, #0]
   80a68:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
   80a6c:	601a      	str	r2, [r3, #0]
	PWM->PWM_CH_NUM[5].PWM_CMR |= PWM_CMR_CALG | PWM_CMR_CPRE_CLKA | PWM_CMR_CPOL;		//Set channel 5 to center aligned waveforms, clock A as source and channel polarity to start high
   80a6e:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
   80a72:	f442 7242 	orr.w	r2, r2, #776	; 0x308
   80a76:	f042 0203 	orr.w	r2, r2, #3
   80a7a:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	PWM->PWM_CH_NUM[5].PWM_CPRD |= 20000;												//Set channel 5 period to 20ms
   80a7e:	f8d3 22ac 	ldr.w	r2, [r3, #684]	; 0x2ac
   80a82:	f442 429c 	orr.w	r2, r2, #19968	; 0x4e00
   80a86:	f042 0220 	orr.w	r2, r2, #32
   80a8a:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY |= 1500;												//Set channel 5 duty cycle to 1.5ms (center position)
   80a8e:	f8d3 22a4 	ldr.w	r2, [r3, #676]	; 0x2a4
   80a92:	f442 62bb 	orr.w	r2, r2, #1496	; 0x5d8
   80a96:	f042 0204 	orr.w	r2, r2, #4
   80a9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	PWM->PWM_ENA |= PWM_ENA_CHID5;														//Enable PWM output for channel 5	
   80a9e:	685a      	ldr	r2, [r3, #4]
   80aa0:	f042 0220 	orr.w	r2, r2, #32
   80aa4:	605a      	str	r2, [r3, #4]
   80aa6:	4770      	bx	lr
   80aa8:	400e0600 	.word	0x400e0600
   80aac:	400e1200 	.word	0x400e1200
   80ab0:	40094000 	.word	0x40094000

00080ab4 <MAP>:
}

int MAP(int pos_in, int pos_in_min, int pos_in_max, int pos_out_min, int pos_out_max) {
   80ab4:	b410      	push	{r4}
	return ((((pos_in - pos_in_min) * (pos_out_max - pos_out_min)) / (pos_in_max - pos_in_min)) + pos_out_min);
   80ab6:	1a40      	subs	r0, r0, r1
   80ab8:	9c01      	ldr	r4, [sp, #4]
   80aba:	1ae4      	subs	r4, r4, r3
   80abc:	fb04 f000 	mul.w	r0, r4, r0
   80ac0:	1a52      	subs	r2, r2, r1
   80ac2:	fb90 f0f2 	sdiv	r0, r0, r2
}
   80ac6:	4418      	add	r0, r3
   80ac8:	bc10      	pop	{r4}
   80aca:	4770      	bx	lr

00080acc <pwm_joystick>:

void pwm_joystick(CAN_MESSAGE* rec, int channel) {
   80acc:	b530      	push	{r4, r5, lr}
   80ace:	b083      	sub	sp, #12
	if ((int8_t)rec->data[channel] > 5) {
   80ad0:	4401      	add	r1, r0
   80ad2:	f991 0003 	ldrsb.w	r0, [r1, #3]
   80ad6:	2805      	cmp	r0, #5
   80ad8:	dd13      	ble.n	80b02 <pwm_joystick+0x36>
		int right = MAP((int8_t)rec->data[channel], 0, 100, 1500, 2100);
   80ada:	f640 0434 	movw	r4, #2100	; 0x834
   80ade:	9400      	str	r4, [sp, #0]
   80ae0:	f240 53dc 	movw	r3, #1500	; 0x5dc
   80ae4:	2264      	movs	r2, #100	; 0x64
   80ae6:	2100      	movs	r1, #0
   80ae8:	4d16      	ldr	r5, [pc, #88]	; (80b44 <pwm_joystick+0x78>)
   80aea:	47a8      	blx	r5
		if (right > 2100) {
   80aec:	42a0      	cmp	r0, r4
   80aee:	dd04      	ble.n	80afa <pwm_joystick+0x2e>
			PWM->PWM_CH_NUM[5].PWM_CDTY = 2100;
   80af0:	4b15      	ldr	r3, [pc, #84]	; (80b48 <pwm_joystick+0x7c>)
   80af2:	f8c3 42a4 	str.w	r4, [r3, #676]	; 0x2a4
			PWM->PWM_CH_NUM[5].PWM_CDTY =left;
		}
	} else {
	PWM->PWM_CH_NUM[5].PWM_CDTY = 1500;
	}
   80af6:	b003      	add	sp, #12
   80af8:	bd30      	pop	{r4, r5, pc}
			PWM->PWM_CH_NUM[5].PWM_CDTY = right;
   80afa:	4b13      	ldr	r3, [pc, #76]	; (80b48 <pwm_joystick+0x7c>)
   80afc:	f8c3 02a4 	str.w	r0, [r3, #676]	; 0x2a4
   80b00:	e7f9      	b.n	80af6 <pwm_joystick+0x2a>
	} else if ((int8_t)rec->data[channel] < -5) {
   80b02:	f110 0f05 	cmn.w	r0, #5
   80b06:	da16      	bge.n	80b36 <pwm_joystick+0x6a>
		int left = MAP((int8_t)rec->data[channel], -100, 0, 900, 1500);
   80b08:	f240 53dc 	movw	r3, #1500	; 0x5dc
   80b0c:	9300      	str	r3, [sp, #0]
   80b0e:	f44f 7361 	mov.w	r3, #900	; 0x384
   80b12:	2200      	movs	r2, #0
   80b14:	f06f 0163 	mvn.w	r1, #99	; 0x63
   80b18:	4c0a      	ldr	r4, [pc, #40]	; (80b44 <pwm_joystick+0x78>)
   80b1a:	47a0      	blx	r4
		if (left < 900) {
   80b1c:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
   80b20:	da05      	bge.n	80b2e <pwm_joystick+0x62>
			PWM->PWM_CH_NUM[5].PWM_CDTY = 900;
   80b22:	f44f 7261 	mov.w	r2, #900	; 0x384
   80b26:	4b08      	ldr	r3, [pc, #32]	; (80b48 <pwm_joystick+0x7c>)
   80b28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
   80b2c:	e7e3      	b.n	80af6 <pwm_joystick+0x2a>
			PWM->PWM_CH_NUM[5].PWM_CDTY =left;
   80b2e:	4b06      	ldr	r3, [pc, #24]	; (80b48 <pwm_joystick+0x7c>)
   80b30:	f8c3 02a4 	str.w	r0, [r3, #676]	; 0x2a4
   80b34:	e7df      	b.n	80af6 <pwm_joystick+0x2a>
	PWM->PWM_CH_NUM[5].PWM_CDTY = 1500;
   80b36:	f240 52dc 	movw	r2, #1500	; 0x5dc
   80b3a:	4b03      	ldr	r3, [pc, #12]	; (80b48 <pwm_joystick+0x7c>)
   80b3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
   80b40:	e7d9      	b.n	80af6 <pwm_joystick+0x2a>
   80b42:	bf00      	nop
   80b44:	00080ab5 	.word	0x00080ab5
   80b48:	40094000 	.word	0x40094000

00080b4c <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80b4c:	4b16      	ldr	r3, [pc, #88]	; (80ba8 <configure_uart+0x5c>)
   80b4e:	2200      	movs	r2, #0
   80b50:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80b52:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80b54:	4b15      	ldr	r3, [pc, #84]	; (80bac <configure_uart+0x60>)
   80b56:	f44f 7140 	mov.w	r1, #768	; 0x300
   80b5a:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80b5c:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80b5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80b60:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80b62:	4002      	ands	r2, r0
   80b64:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80b68:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80b6a:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
   80b70:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80b74:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80b76:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80b7a:	21ac      	movs	r1, #172	; 0xac
   80b7c:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80b7e:	f240 2123 	movw	r1, #547	; 0x223
   80b82:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80b84:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80b88:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80b8a:	f240 2102 	movw	r1, #514	; 0x202
   80b8e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80b92:	f04f 31ff 	mov.w	r1, #4294967295
   80b96:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80b98:	21e1      	movs	r1, #225	; 0xe1
   80b9a:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80b9c:	4904      	ldr	r1, [pc, #16]	; (80bb0 <configure_uart+0x64>)
   80b9e:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80ba0:	2250      	movs	r2, #80	; 0x50
   80ba2:	601a      	str	r2, [r3, #0]
   80ba4:	4770      	bx	lr
   80ba6:	bf00      	nop
   80ba8:	20000458 	.word	0x20000458
   80bac:	400e0e00 	.word	0x400e0e00
   80bb0:	e000e100 	.word	0xe000e100

00080bb4 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80bb4:	4b07      	ldr	r3, [pc, #28]	; (80bd4 <uart_putchar+0x20>)
   80bb6:	695b      	ldr	r3, [r3, #20]
   80bb8:	f013 0f02 	tst.w	r3, #2
   80bbc:	d008      	beq.n	80bd0 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80bbe:	4b05      	ldr	r3, [pc, #20]	; (80bd4 <uart_putchar+0x20>)
   80bc0:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80bc2:	4b04      	ldr	r3, [pc, #16]	; (80bd4 <uart_putchar+0x20>)
   80bc4:	695b      	ldr	r3, [r3, #20]
   80bc6:	f413 7f00 	tst.w	r3, #512	; 0x200
   80bca:	d0fa      	beq.n	80bc2 <uart_putchar+0xe>
	return 0;
   80bcc:	2000      	movs	r0, #0
   80bce:	4770      	bx	lr
	return 1;
   80bd0:	2001      	movs	r0, #1
}
   80bd2:	4770      	bx	lr
   80bd4:	400e0800 	.word	0x400e0800

00080bd8 <UART_Handler>:

void UART_Handler(void)
{
   80bd8:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80bda:	4b15      	ldr	r3, [pc, #84]	; (80c30 <UART_Handler+0x58>)
   80bdc:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80bde:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80be2:	d003      	beq.n	80bec <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80be4:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80be8:	4a11      	ldr	r2, [pc, #68]	; (80c30 <UART_Handler+0x58>)
   80bea:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80bec:	f013 0f01 	tst.w	r3, #1
   80bf0:	d012      	beq.n	80c18 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80bf2:	4810      	ldr	r0, [pc, #64]	; (80c34 <UART_Handler+0x5c>)
   80bf4:	7842      	ldrb	r2, [r0, #1]
   80bf6:	1c53      	adds	r3, r2, #1
   80bf8:	4259      	negs	r1, r3
   80bfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80bfe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80c02:	bf58      	it	pl
   80c04:	424b      	negpl	r3, r1
   80c06:	7801      	ldrb	r1, [r0, #0]
   80c08:	428b      	cmp	r3, r1
   80c0a:	d006      	beq.n	80c1a <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80c0c:	4908      	ldr	r1, [pc, #32]	; (80c30 <UART_Handler+0x58>)
   80c0e:	6988      	ldr	r0, [r1, #24]
   80c10:	4908      	ldr	r1, [pc, #32]	; (80c34 <UART_Handler+0x5c>)
   80c12:	440a      	add	r2, r1
   80c14:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80c16:	704b      	strb	r3, [r1, #1]
   80c18:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80c1a:	4807      	ldr	r0, [pc, #28]	; (80c38 <UART_Handler+0x60>)
   80c1c:	4b07      	ldr	r3, [pc, #28]	; (80c3c <UART_Handler+0x64>)
   80c1e:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80c20:	4b04      	ldr	r3, [pc, #16]	; (80c34 <UART_Handler+0x5c>)
   80c22:	7859      	ldrb	r1, [r3, #1]
   80c24:	4a02      	ldr	r2, [pc, #8]	; (80c30 <UART_Handler+0x58>)
   80c26:	6992      	ldr	r2, [r2, #24]
   80c28:	440b      	add	r3, r1
   80c2a:	709a      	strb	r2, [r3, #2]
			return;
   80c2c:	bd08      	pop	{r3, pc}
   80c2e:	bf00      	nop
   80c30:	400e0800 	.word	0x400e0800
   80c34:	20000458 	.word	0x20000458
   80c38:	00080eec 	.word	0x00080eec
   80c3c:	00080845 	.word	0x00080845

00080c40 <__libc_init_array>:
   80c40:	b570      	push	{r4, r5, r6, lr}
   80c42:	4e0f      	ldr	r6, [pc, #60]	; (80c80 <__libc_init_array+0x40>)
   80c44:	4d0f      	ldr	r5, [pc, #60]	; (80c84 <__libc_init_array+0x44>)
   80c46:	1b76      	subs	r6, r6, r5
   80c48:	10b6      	asrs	r6, r6, #2
   80c4a:	bf18      	it	ne
   80c4c:	2400      	movne	r4, #0
   80c4e:	d005      	beq.n	80c5c <__libc_init_array+0x1c>
   80c50:	3401      	adds	r4, #1
   80c52:	f855 3b04 	ldr.w	r3, [r5], #4
   80c56:	4798      	blx	r3
   80c58:	42a6      	cmp	r6, r4
   80c5a:	d1f9      	bne.n	80c50 <__libc_init_array+0x10>
   80c5c:	4e0a      	ldr	r6, [pc, #40]	; (80c88 <__libc_init_array+0x48>)
   80c5e:	4d0b      	ldr	r5, [pc, #44]	; (80c8c <__libc_init_array+0x4c>)
   80c60:	f000 f96a 	bl	80f38 <_init>
   80c64:	1b76      	subs	r6, r6, r5
   80c66:	10b6      	asrs	r6, r6, #2
   80c68:	bf18      	it	ne
   80c6a:	2400      	movne	r4, #0
   80c6c:	d006      	beq.n	80c7c <__libc_init_array+0x3c>
   80c6e:	3401      	adds	r4, #1
   80c70:	f855 3b04 	ldr.w	r3, [r5], #4
   80c74:	4798      	blx	r3
   80c76:	42a6      	cmp	r6, r4
   80c78:	d1f9      	bne.n	80c6e <__libc_init_array+0x2e>
   80c7a:	bd70      	pop	{r4, r5, r6, pc}
   80c7c:	bd70      	pop	{r4, r5, r6, pc}
   80c7e:	bf00      	nop
   80c80:	00080f44 	.word	0x00080f44
   80c84:	00080f44 	.word	0x00080f44
   80c88:	00080f4c 	.word	0x00080f4c
   80c8c:	00080f44 	.word	0x00080f44

00080c90 <__itoa>:
   80c90:	1e93      	subs	r3, r2, #2
   80c92:	2b22      	cmp	r3, #34	; 0x22
   80c94:	d810      	bhi.n	80cb8 <__itoa+0x28>
   80c96:	2a0a      	cmp	r2, #10
   80c98:	b510      	push	{r4, lr}
   80c9a:	d006      	beq.n	80caa <__itoa+0x1a>
   80c9c:	2300      	movs	r3, #0
   80c9e:	460c      	mov	r4, r1
   80ca0:	4419      	add	r1, r3
   80ca2:	f000 f80f 	bl	80cc4 <__utoa>
   80ca6:	4620      	mov	r0, r4
   80ca8:	bd10      	pop	{r4, pc}
   80caa:	2800      	cmp	r0, #0
   80cac:	daf6      	bge.n	80c9c <__itoa+0xc>
   80cae:	232d      	movs	r3, #45	; 0x2d
   80cb0:	4240      	negs	r0, r0
   80cb2:	700b      	strb	r3, [r1, #0]
   80cb4:	2301      	movs	r3, #1
   80cb6:	e7f2      	b.n	80c9e <__itoa+0xe>
   80cb8:	2000      	movs	r0, #0
   80cba:	7008      	strb	r0, [r1, #0]
   80cbc:	4770      	bx	lr
   80cbe:	bf00      	nop

00080cc0 <itoa>:
   80cc0:	f7ff bfe6 	b.w	80c90 <__itoa>

00080cc4 <__utoa>:
   80cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   80cc6:	b08b      	sub	sp, #44	; 0x2c
   80cc8:	466f      	mov	r7, sp
   80cca:	4615      	mov	r5, r2
   80ccc:	f8df e070 	ldr.w	lr, [pc, #112]	; 80d40 <__utoa+0x7c>
   80cd0:	4604      	mov	r4, r0
   80cd2:	460e      	mov	r6, r1
   80cd4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   80cd8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   80cda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   80cde:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   80ce0:	e89e 0003 	ldmia.w	lr, {r0, r1}
   80ce4:	1eab      	subs	r3, r5, #2
   80ce6:	f847 0b04 	str.w	r0, [r7], #4
   80cea:	2b22      	cmp	r3, #34	; 0x22
   80cec:	7039      	strb	r1, [r7, #0]
   80cee:	d822      	bhi.n	80d36 <__utoa+0x72>
   80cf0:	1e71      	subs	r1, r6, #1
   80cf2:	4608      	mov	r0, r1
   80cf4:	2300      	movs	r3, #0
   80cf6:	e000      	b.n	80cfa <__utoa+0x36>
   80cf8:	4613      	mov	r3, r2
   80cfa:	fbb4 f2f5 	udiv	r2, r4, r5
   80cfe:	fb05 4412 	mls	r4, r5, r2, r4
   80d02:	af0a      	add	r7, sp, #40	; 0x28
   80d04:	443c      	add	r4, r7
   80d06:	f814 7c28 	ldrb.w	r7, [r4, #-40]
   80d0a:	4614      	mov	r4, r2
   80d0c:	f800 7f01 	strb.w	r7, [r0, #1]!
   80d10:	1c5a      	adds	r2, r3, #1
   80d12:	2c00      	cmp	r4, #0
   80d14:	d1f0      	bne.n	80cf8 <__utoa+0x34>
   80d16:	54b4      	strb	r4, [r6, r2]
   80d18:	18f2      	adds	r2, r6, r3
   80d1a:	b14b      	cbz	r3, 80d30 <__utoa+0x6c>
   80d1c:	3401      	adds	r4, #1
   80d1e:	784d      	ldrb	r5, [r1, #1]
   80d20:	7817      	ldrb	r7, [r2, #0]
   80d22:	1b18      	subs	r0, r3, r4
   80d24:	4284      	cmp	r4, r0
   80d26:	f801 7f01 	strb.w	r7, [r1, #1]!
   80d2a:	f802 5901 	strb.w	r5, [r2], #-1
   80d2e:	dbf5      	blt.n	80d1c <__utoa+0x58>
   80d30:	4630      	mov	r0, r6
   80d32:	b00b      	add	sp, #44	; 0x2c
   80d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80d36:	2000      	movs	r0, #0
   80d38:	7030      	strb	r0, [r6, #0]
   80d3a:	b00b      	add	sp, #44	; 0x2c
   80d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80d3e:	bf00      	nop
   80d40:	00080f10 	.word	0x00080f10

00080d44 <register_fini>:
   80d44:	4b02      	ldr	r3, [pc, #8]	; (80d50 <register_fini+0xc>)
   80d46:	b113      	cbz	r3, 80d4e <register_fini+0xa>
   80d48:	4802      	ldr	r0, [pc, #8]	; (80d54 <register_fini+0x10>)
   80d4a:	f000 b805 	b.w	80d58 <atexit>
   80d4e:	4770      	bx	lr
   80d50:	00000000 	.word	0x00000000
   80d54:	00080d65 	.word	0x00080d65

00080d58 <atexit>:
   80d58:	2300      	movs	r3, #0
   80d5a:	4601      	mov	r1, r0
   80d5c:	461a      	mov	r2, r3
   80d5e:	4618      	mov	r0, r3
   80d60:	f000 b81e 	b.w	80da0 <__register_exitproc>

00080d64 <__libc_fini_array>:
   80d64:	b538      	push	{r3, r4, r5, lr}
   80d66:	4c0a      	ldr	r4, [pc, #40]	; (80d90 <__libc_fini_array+0x2c>)
   80d68:	4d0a      	ldr	r5, [pc, #40]	; (80d94 <__libc_fini_array+0x30>)
   80d6a:	1b64      	subs	r4, r4, r5
   80d6c:	10a4      	asrs	r4, r4, #2
   80d6e:	d00a      	beq.n	80d86 <__libc_fini_array+0x22>
   80d70:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80d74:	3b01      	subs	r3, #1
   80d76:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80d7a:	3c01      	subs	r4, #1
   80d7c:	f855 3904 	ldr.w	r3, [r5], #-4
   80d80:	4798      	blx	r3
   80d82:	2c00      	cmp	r4, #0
   80d84:	d1f9      	bne.n	80d7a <__libc_fini_array+0x16>
   80d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80d8a:	f000 b8df 	b.w	80f4c <_fini>
   80d8e:	bf00      	nop
   80d90:	00080f5c 	.word	0x00080f5c
   80d94:	00080f58 	.word	0x00080f58

00080d98 <__retarget_lock_acquire_recursive>:
   80d98:	4770      	bx	lr
   80d9a:	bf00      	nop

00080d9c <__retarget_lock_release_recursive>:
   80d9c:	4770      	bx	lr
   80d9e:	bf00      	nop

00080da0 <__register_exitproc>:
   80da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80da4:	4d2c      	ldr	r5, [pc, #176]	; (80e58 <__register_exitproc+0xb8>)
   80da6:	4606      	mov	r6, r0
   80da8:	6828      	ldr	r0, [r5, #0]
   80daa:	4698      	mov	r8, r3
   80dac:	460f      	mov	r7, r1
   80dae:	4691      	mov	r9, r2
   80db0:	f7ff fff2 	bl	80d98 <__retarget_lock_acquire_recursive>
   80db4:	4b29      	ldr	r3, [pc, #164]	; (80e5c <__register_exitproc+0xbc>)
   80db6:	681c      	ldr	r4, [r3, #0]
   80db8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80dbc:	2b00      	cmp	r3, #0
   80dbe:	d03e      	beq.n	80e3e <__register_exitproc+0x9e>
   80dc0:	685a      	ldr	r2, [r3, #4]
   80dc2:	2a1f      	cmp	r2, #31
   80dc4:	dc1c      	bgt.n	80e00 <__register_exitproc+0x60>
   80dc6:	f102 0e01 	add.w	lr, r2, #1
   80dca:	b176      	cbz	r6, 80dea <__register_exitproc+0x4a>
   80dcc:	2101      	movs	r1, #1
   80dce:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80dd2:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80dd6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80dda:	4091      	lsls	r1, r2
   80ddc:	4308      	orrs	r0, r1
   80dde:	2e02      	cmp	r6, #2
   80de0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80de4:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80de8:	d023      	beq.n	80e32 <__register_exitproc+0x92>
   80dea:	3202      	adds	r2, #2
   80dec:	f8c3 e004 	str.w	lr, [r3, #4]
   80df0:	6828      	ldr	r0, [r5, #0]
   80df2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80df6:	f7ff ffd1 	bl	80d9c <__retarget_lock_release_recursive>
   80dfa:	2000      	movs	r0, #0
   80dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80e00:	4b17      	ldr	r3, [pc, #92]	; (80e60 <__register_exitproc+0xc0>)
   80e02:	b30b      	cbz	r3, 80e48 <__register_exitproc+0xa8>
   80e04:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80e08:	f3af 8000 	nop.w
   80e0c:	4603      	mov	r3, r0
   80e0e:	b1d8      	cbz	r0, 80e48 <__register_exitproc+0xa8>
   80e10:	2000      	movs	r0, #0
   80e12:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80e16:	f04f 0e01 	mov.w	lr, #1
   80e1a:	6058      	str	r0, [r3, #4]
   80e1c:	6019      	str	r1, [r3, #0]
   80e1e:	4602      	mov	r2, r0
   80e20:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80e24:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80e28:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80e2c:	2e00      	cmp	r6, #0
   80e2e:	d0dc      	beq.n	80dea <__register_exitproc+0x4a>
   80e30:	e7cc      	b.n	80dcc <__register_exitproc+0x2c>
   80e32:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80e36:	4301      	orrs	r1, r0
   80e38:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80e3c:	e7d5      	b.n	80dea <__register_exitproc+0x4a>
   80e3e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80e42:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80e46:	e7bb      	b.n	80dc0 <__register_exitproc+0x20>
   80e48:	6828      	ldr	r0, [r5, #0]
   80e4a:	f7ff ffa7 	bl	80d9c <__retarget_lock_release_recursive>
   80e4e:	f04f 30ff 	mov.w	r0, #4294967295
   80e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80e56:	bf00      	nop
   80e58:	20000430 	.word	0x20000430
   80e5c:	00080f0c 	.word	0x00080f0c
   80e60:	00000000 	.word	0x00000000
   80e64:	304e4143 	.word	0x304e4143
   80e68:	73656d20 	.word	0x73656d20
   80e6c:	65676173 	.word	0x65676173
   80e70:	72726120 	.word	0x72726120
   80e74:	64657669 	.word	0x64657669
   80e78:	206e6920 	.word	0x206e6920
   80e7c:	2d6e6f6e 	.word	0x2d6e6f6e
   80e80:	64657375 	.word	0x64657375
   80e84:	69616d20 	.word	0x69616d20
   80e88:	786f626c 	.word	0x786f626c
   80e8c:	00000d0a 	.word	0x00000d0a
   80e90:	25203a78 	.word	0x25203a78
   80e94:	00000973 	.word	0x00000973
   80e98:	6c616f47 	.word	0x6c616f47
   80e9c:	75632021 	.word	0x75632021
   80ea0:	6e657272 	.word	0x6e657272
   80ea4:	63732074 	.word	0x63732074
   80ea8:	3a65726f 	.word	0x3a65726f
   80eac:	20642520 	.word	0x20642520
   80eb0:	00000a0d 	.word	0x00000a0d
   80eb4:	41544144 	.word	0x41544144
   80eb8:	25203a30 	.word	0x25203a30
   80ebc:	00092064 	.word	0x00092064
   80ec0:	6f636e45 	.word	0x6f636e45
   80ec4:	3a726564 	.word	0x3a726564
   80ec8:	20642520 	.word	0x20642520
   80ecc:	00000a0d 	.word	0x00000a0d
   80ed0:	6c756e28 	.word	0x6c756e28
   80ed4:	0000296c 	.word	0x0000296c
   80ed8:	5f434144 	.word	0x5f434144
   80edc:	54495257 	.word	0x54495257
   80ee0:	25203a45 	.word	0x25203a45
   80ee4:	20783830 	.word	0x20783830
   80ee8:	00000009 	.word	0x00000009
   80eec:	3a525245 	.word	0x3a525245
   80ef0:	52415520 	.word	0x52415520
   80ef4:	58522054 	.word	0x58522054
   80ef8:	66756220 	.word	0x66756220
   80efc:	20726566 	.word	0x20726566
   80f00:	66207369 	.word	0x66207369
   80f04:	0a6c6c75 	.word	0x0a6c6c75
   80f08:	0000000d 	.word	0x0000000d

00080f0c <_global_impure_ptr>:
   80f0c:	20000008 33323130 37363534 62613938     ... 0123456789ab
   80f1c:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
   80f2c:	76757473 7a797877 00000000              stuvwxyz....

00080f38 <_init>:
   80f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80f3a:	bf00      	nop
   80f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80f3e:	bc08      	pop	{r3}
   80f40:	469e      	mov	lr, r3
   80f42:	4770      	bx	lr

00080f44 <__init_array_start>:
   80f44:	00080d45 	.word	0x00080d45

00080f48 <__frame_dummy_init_array_entry>:
   80f48:	00080119                                ....

00080f4c <_fini>:
   80f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80f4e:	bf00      	nop
   80f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80f52:	bc08      	pop	{r3}
   80f54:	469e      	mov	lr, r3
   80f56:	4770      	bx	lr

00080f58 <__fini_array_start>:
   80f58:	000800f5 	.word	0x000800f5
