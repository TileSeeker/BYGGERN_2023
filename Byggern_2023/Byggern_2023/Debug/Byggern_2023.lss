
Byggern_2023.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000104  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e0  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000718  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000355  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001488  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040c  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001943  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  6c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 e0       	ldi	r30, 0x04	; 4
  84:	f1 e0       	ldi	r31, 0x01	; 1
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ac 30       	cpi	r26, 0x0C	; 12
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>
  92:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  96:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <uart_send_byte>:
		//_delay_ms(20);	
    }
}

void uart_send_byte(uint8_t data){
	while (!(UCSR0A & (1 << UDRE0)));
  9e:	5d 9b       	sbis	0x0b, 5	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <uart_send_byte>
	UDR0 = data;
  a2:	8c b9       	out	0x0c, r24	; 12
  a4:	08 95       	ret

000000a6 <main>:




int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2c 97       	sbiw	r28, 0x0c	; 12
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	uart_init();
  ba:	0e 94 77 00 	call	0xee	; 0xee <uart_init>
	char s[] = "Hello World";
  be:	8c e0       	ldi	r24, 0x0C	; 12
  c0:	e0 e0       	ldi	r30, 0x00	; 0
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	de 01       	movw	r26, r28
  c6:	11 96       	adiw	r26, 0x01	; 1
  c8:	01 90       	ld	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	8a 95       	dec	r24
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x22>
	DDRB = 0x1;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	87 bb       	out	0x17, r24	; 23
    while (1) 
    {
		uart_send_byte(s[0]);
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	0e 94 4f 00 	call	0x9e	; 0x9e <uart_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	81 ee       	ldi	r24, 0xE1	; 225
  de:	94 e0       	ldi	r25, 0x04	; 4
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x3a>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x44>
  ea:	00 00       	nop
  ec:	f3 cf       	rjmp	.-26     	; 0xd4 <main+0x2e>

000000ee <uart_init>:
#define MYUBBR (F_CPU/16/BAUD_RATE-1)


void uart_init(void){
	//Configure baud rate
	UBRR0H = (unsigned char)(MYUBBR >> 8);
  ee:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)(MYUBBR);
  f0:	85 e6       	ldi	r24, 0x65	; 101
  f2:	89 b9       	out	0x09, r24	; 9
	
	//Configure Control andStatus Register A
	UCSR0A = 0x00|	(0<<RXC0)	|	//USART Receive Complete Indicator
  f4:	1b b8       	out	0x0b, r1	; 11
					(0<<UPE0)	|	//Parity Error Indicator. Always write to 0 when writing to UCSR0A
					(0<<U2X0)	|	//Double the USART Transmission Speed Disabled
					(0<<MPCM0);		//Multi-processor Communication Mode Disabled
	
	//Configure Control andStatus Register B
	UCSR0B = 0x00|	(1<<RXCIE0)	|	//RX Complete Enable
  f6:	88 ef       	ldi	r24, 0xF8	; 248
  f8:	8a b9       	out	0x0a, r24	; 10
					(0<<UCSZ02)	|	//8-bit Frame size
					(0<<RXB80)	|	//RX data bit. Not used during init
					(0<<TXB80);		//TX data bit. Not used during init
					
	//Configure Control andStatus Register B
	UCSR0C = 0x00|	(1<<URSEL0)	|	//URSEL0 set to 1 to write to UCSR0C
  fa:	86 e8       	ldi	r24, 0x86	; 134
  fc:	80 bd       	out	0x20, r24	; 32
  fe:	08 95       	ret

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
