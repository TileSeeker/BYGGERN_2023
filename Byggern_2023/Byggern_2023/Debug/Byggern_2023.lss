
Byggern_2023.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000298  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000074  0080010e  0080010e  0000033a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d06  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000870  00000000  00000000  00001146  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000537  00000000  00000000  000019b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00001ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053e  00000000  00000000  000020cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000052c  00000000  00000000  0000260a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002b36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__vector_23>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 e9       	ldi	r30, 0x98	; 152
  84:	f2 e0       	ldi	r31, 0x02	; 2
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 30       	cpi	r26, 0x0E	; 14
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	ae e0       	ldi	r26, 0x0E	; 14
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 38       	cpi	r26, 0x82	; 130
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 4a 01 	jmp	0x294	; 0x294 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
#include "uart_lib.h"



int main(void)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	2d 97       	sbiw	r28, 0x0d	; 13
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
	uart_init();
  c2:	0e 94 85 00 	call	0x10a	; 0x10a <uart_init>
	char s[] = "Hello World\n";
  c6:	8d e0       	ldi	r24, 0x0D	; 13
  c8:	e0 e0       	ldi	r30, 0x00	; 0
  ca:	f1 e0       	ldi	r31, 0x01	; 1
  cc:	de 01       	movw	r26, r28
  ce:	11 96       	adiw	r26, 0x01	; 1
  d0:	01 90       	ld	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	8a 95       	dec	r24
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x22>
	DDRB = 0x1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	87 bb       	out	0x17, r24	; 23
    while (1) 
    {
		uart_send_byte(s[0]);
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	0e 94 cc 00 	call	0x198	; 0x198 <uart_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	8f e7       	ldi	r24, 0x7F	; 127
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x3a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x44>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x46>
  f4:	f3 cf       	rjmp	.-26     	; 0xdc <main+0x2e>

000000f6 <init_fifo>:
}


char uart_read_byte(void){
	return fifo_pop(&fifo_rx);
}
  f6:	fc 01       	movw	r30, r24
  f8:	71 83       	std	Z+1, r23	; 0x01
  fa:	60 83       	st	Z, r22
  fc:	53 83       	std	Z+3, r21	; 0x03
  fe:	42 83       	std	Z+2, r20	; 0x02
 100:	15 82       	std	Z+5, r1	; 0x05
 102:	14 82       	std	Z+4, r1	; 0x04
 104:	17 82       	std	Z+7, r1	; 0x07
 106:	16 82       	std	Z+6, r1	; 0x06
 108:	08 95       	ret

0000010a <uart_init>:
 10a:	10 bc       	out	0x20, r1	; 32
 10c:	8f e1       	ldi	r24, 0x1F	; 31
 10e:	89 b9       	out	0x09, r24	; 9
 110:	1b b8       	out	0x0b, r1	; 11
 112:	88 ef       	ldi	r24, 0xF8	; 248
 114:	8a b9       	out	0x0a, r24	; 10
 116:	86 e8       	ldi	r24, 0x86	; 134
 118:	80 bd       	out	0x20, r24	; 32
 11a:	42 e3       	ldi	r20, 0x32	; 50
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	60 e5       	ldi	r22, 0x50	; 80
 120:	71 e0       	ldi	r23, 0x01	; 1
 122:	88 e4       	ldi	r24, 0x48	; 72
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 7b 00 	call	0xf6	; 0xf6 <init_fifo>
 12a:	42 e3       	ldi	r20, 0x32	; 50
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	6e e0       	ldi	r22, 0x0E	; 14
 130:	71 e0       	ldi	r23, 0x01	; 1
 132:	80 e4       	ldi	r24, 0x40	; 64
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 7b 00 	call	0xf6	; 0xf6 <init_fifo>
 13a:	08 95       	ret

0000013c <fifo_full>:
 13c:	fc 01       	movw	r30, r24
 13e:	24 81       	ldd	r18, Z+4	; 0x04
 140:	35 81       	ldd	r19, Z+5	; 0x05
 142:	82 81       	ldd	r24, Z+2	; 0x02
 144:	93 81       	ldd	r25, Z+3	; 0x03
 146:	28 17       	cp	r18, r24
 148:	39 07       	cpc	r19, r25
 14a:	11 f0       	breq	.+4      	; 0x150 <fifo_full+0x14>
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	08 95       	ret
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	08 95       	ret

00000154 <fifo_empty>:
 154:	fc 01       	movw	r30, r24
 156:	84 81       	ldd	r24, Z+4	; 0x04
 158:	95 81       	ldd	r25, Z+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	11 f0       	breq	.+4      	; 0x162 <fifo_empty+0xe>
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	08 95       	ret
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	08 95       	ret

00000166 <fifo_push>:
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ec 01       	movw	r28, r24
 16e:	16 2f       	mov	r17, r22
 170:	0e 94 9e 00 	call	0x13c	; 0x13c <fifo_full>
 174:	81 11       	cpse	r24, r1
 176:	0c c0       	rjmp	.+24     	; 0x190 <fifo_push+0x2a>
 178:	e8 81       	ld	r30, Y
 17a:	f9 81       	ldd	r31, Y+1	; 0x01
 17c:	8c 81       	ldd	r24, Y+4	; 0x04
 17e:	9d 81       	ldd	r25, Y+5	; 0x05
 180:	e8 0f       	add	r30, r24
 182:	f9 1f       	adc	r31, r25
 184:	10 83       	st	Z, r17
 186:	8c 81       	ldd	r24, Y+4	; 0x04
 188:	9d 81       	ldd	r25, Y+5	; 0x05
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	9d 83       	std	Y+5, r25	; 0x05
 18e:	8c 83       	std	Y+4, r24	; 0x04
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	08 95       	ret

00000198 <uart_send_byte>:
 198:	5d 9b       	sbis	0x0b, 5	; 11
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <uart_send_byte+0x8>
 19c:	8c b9       	out	0x0c, r24	; 12
 19e:	08 95       	ret
 1a0:	68 2f       	mov	r22, r24
 1a2:	80 e4       	ldi	r24, 0x40	; 64
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 b3 00 	call	0x166	; 0x166 <fifo_push>
 1aa:	08 95       	ret

000001ac <__vector_19>:
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	6f 93       	push	r22
 1c0:	7f 93       	push	r23
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
 1ce:	6c b1       	in	r22, 0x0c	; 12
 1d0:	88 e4       	ldi	r24, 0x48	; 72
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 b3 00 	call	0x166	; 0x166 <fifo_push>
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	7f 91       	pop	r23
 1e6:	6f 91       	pop	r22
 1e8:	5f 91       	pop	r21
 1ea:	4f 91       	pop	r20
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <fifo_pop>:
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ec 01       	movw	r28, r24
 200:	0e 94 aa 00 	call	0x154	; 0x154 <fifo_empty>
 204:	81 11       	cpse	r24, r1
 206:	15 c0       	rjmp	.+42     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
 208:	e8 81       	ld	r30, Y
 20a:	f9 81       	ldd	r31, Y+1	; 0x01
 20c:	2e 81       	ldd	r18, Y+6	; 0x06
 20e:	3f 81       	ldd	r19, Y+7	; 0x07
 210:	e2 0f       	add	r30, r18
 212:	f3 1f       	adc	r31, r19
 214:	80 81       	ld	r24, Z
 216:	2f 5f       	subi	r18, 0xFF	; 255
 218:	3f 4f       	sbci	r19, 0xFF	; 255
 21a:	3f 83       	std	Y+7, r19	; 0x07
 21c:	2e 83       	std	Y+6, r18	; 0x06
 21e:	4c 81       	ldd	r20, Y+4	; 0x04
 220:	5d 81       	ldd	r21, Y+5	; 0x05
 222:	24 17       	cp	r18, r20
 224:	35 07       	cpc	r19, r21
 226:	31 f4       	brne	.+12     	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
 228:	1f 82       	std	Y+7, r1	; 0x07
 22a:	1e 82       	std	Y+6, r1	; 0x06
 22c:	1d 82       	std	Y+5, r1	; 0x05
 22e:	1c 82       	std	Y+4, r1	; 0x04
 230:	01 c0       	rjmp	.+2      	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <__vector_23>:
ISR (USART0_RXC_vect){
	char data = UDR0;
	fifo_push(&fifo_rx, data);
}

ISR (USART0_TXC_vect){
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	2f 93       	push	r18
 246:	3f 93       	push	r19
 248:	4f 93       	push	r20
 24a:	5f 93       	push	r21
 24c:	6f 93       	push	r22
 24e:	7f 93       	push	r23
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	af 93       	push	r26
 256:	bf 93       	push	r27
 258:	ef 93       	push	r30
 25a:	ff 93       	push	r31
	if (!(fifo_empty(&fifo_tx))){
 25c:	80 e4       	ldi	r24, 0x40	; 64
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0e 94 aa 00 	call	0x154	; 0x154 <fifo_empty>
 264:	81 11       	cpse	r24, r1
 266:	05 c0       	rjmp	.+10     	; 0x272 <__vector_23+0x38>
		UDR0 = fifo_pop(&fifo_tx);
 268:	80 e4       	ldi	r24, 0x40	; 64
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <fifo_pop>
 270:	8c b9       	out	0x0c, r24	; 12
	}
}
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <_exit>:
 294:	f8 94       	cli

00000296 <__stop_program>:
 296:	ff cf       	rjmp	.-2      	; 0x296 <__stop_program>
