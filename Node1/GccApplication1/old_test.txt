//LED test
DDRE = 0b10;  //Set ALE as output		//or use 0b10
PORTE =  0b10; //Set ALE as high		//or use 0b10

DDRA = (1 << DDA0) | (1 << DDA1) | (1 << DDA2);	//Configure PA0 as output
PORTA = 0b0000000; //PA0 -> D1 
_delay_ms(2000);
	
PORTE = 0b00; //Set ALE low (saves value in latch)
_delay_ms(2000);
	
PORTA = 0b1111111;
_delay_ms(2000);
	
PORTE = 0b10;  //ALE is high and LEDs should update

//NAND test
XMEM_write(1, 0x401);
_delay_ms(10);
XMEM_write(1, 0x800);
		
//UART:
printf("Hello World\n Test");
UART_tr('B');
char recived = UART_recive();
_delay_ms(10);
printf("%c", recived);

//ADC & joystick test
//printf("ADC: x: %d\t y: %d\t dir-x: %d\t dir-y: %d \n\n", joystick_position_read().x_pos, joystick_position_read().y_pos, joystick_direction_read().x_dir, joystick_direction_read().y_dir);
		
//Slider test
//printf("Slider: %d \n\n", read_slider_position(channel_2));

//OLED print test
//oled_arrow_at_pos(1, 0);
//oled_print("Hello", 1, font_size);
//oled_print("Hello 2", 2, 1);

//Joystick button test
trigger = (PINB >> PB1) & (1); //Read Joystick Value
if (!trigger) {
	printf("Button pres");
}

//CAN test 1
//mcp2515_init();
//mcp2515_mode_select(MODE_LOOPBACK);
//printf("Status: %x \r\n", mcp2515_read_status());
//mcp2515_write(MCP_TXB0D0, 'a');
//mcp2515_write(MCP_TXB0D0+1, 'b');
//mcp2515_rts(0);
//printf("Data %x \r\n", mcp2515_read(MCP_RXB0D0));
//printf("Data %x \r\n", mcp2515_read(MCP_RXB0D0 +1));

//CAN test 2
//can_init();
//printf("Status: %x \r\n", mcp2515_read_status());
	
can_message_t test = {
	.id = 1000,
	.length = 3,
	.data = "aba"
};
	
//can_send_message(&test);
//_delay_ms(10);
//can_message_t test_r = can_recieve_message();
	
//printf("ID: %i \r\n", test_r.id);
//printf("Length: %i \r\n", test_r.length);
//printf("Data: %s \r\n", test_r.data);