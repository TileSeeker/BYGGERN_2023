
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000005ee  00000682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010a  0080010a  0000068c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018b7  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d2d  00000000  00000000  0000214f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cd6  00000000  00000000  00002e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b8  00000000  00000000  00003b54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a7  00000000  00000000  00003f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ca  00000000  00000000  000046b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000507d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_23>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee ee       	ldi	r30, 0xEE	; 238
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 30       	cpi	r26, 0x0A	; 10
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	aa e0       	ldi	r26, 0x0A	; 10
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 31       	cpi	r26, 0x18	; 24
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  a6:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_read>:
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	e0 e0       	ldi	r30, 0x00	; 0
  b2:	f4 e1       	ldi	r31, 0x14	; 20
  b4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	8b ee       	ldi	r24, 0xEB	; 235
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <ADC_read+0xc>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <ADC_read+0x12>
  c0:	80 81       	ld	r24, Z
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	08 95       	ret

000000c6 <joystick_calibrate>:
		direction.y_dir = DOWN;
	} else {
		direction.y_dir = Y_MID;
	}
	return direction;
}
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 57 00 	call	0xae	; 0xae <ADC_read>
  ce:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
  d2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 57 00 	call	0xae	; 0xae <ADC_read>
  de:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <y_middle_position+0x1>
  e2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <y_middle_position>
  e6:	08 95       	ret

000000e8 <init_joystick_button>:

void init_joystick_button(void) {
	DDRB	&= ~(1 << DDB1); //Set pin to INPUT
  e8:	87 b3       	in	r24, 0x17	; 23
  ea:	8d 7f       	andi	r24, 0xFD	; 253
  ec:	87 bb       	out	0x17, r24	; 23
	PORTB	|= (1 << PB1);	//Enable internal pull-up
  ee:	88 b3       	in	r24, 0x18	; 24
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	08 95       	ret

000000f6 <main>:
// left slider: PWM PB4 -> AIN2 / channel 2
// right slider: PWM PD1 -> AIN3 / channel 3

int main(void)
{
	sei();  //Enable global interrupts	
  f6:	78 94       	sei
	
	UART_init();
  f8:	0e 94 40 01 	call	0x280	; 0x280 <UART_init>
	XMEM_init();
  fc:	0e 94 5f 01 	call	0x2be	; 0x2be <XMEM_init>
	joystick_calibrate();
 100:	0e 94 63 00 	call	0xc6	; 0xc6 <joystick_calibrate>
	init_joystick_button();
 104:	0e 94 74 00 	call	0xe8	; 0xe8 <init_joystick_button>
	uint8_t trigger;
	
	//OLED setup
	oled_init();
 108:	0e 94 a1 00 	call	0x142	; 0x142 <oled_init>
	oled_reset();
 10c:	0e 94 06 01 	call	0x20c	; 0x20c <oled_reset>
	oled_set_brigthness(255);
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	0e 94 15 01 	call	0x22a	; 0x22a <oled_set_brigthness>
	
	//SPI
	spi_init();
 116:	0e 94 1f 01 	call	0x23e	; 0x23e <spi_init>
		
	while(1) {	
		spi_write("H");
 11a:	87 e0       	ldi	r24, 0x07	; 7
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e 94 2d 01 	call	0x25a	; 0x25a <spi_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	8f e7       	ldi	r24, 0x7F	; 127
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x32>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x3c>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x3e>
 134:	f2 cf       	rjmp	.-28     	; 0x11a <main+0x24>

00000136 <write_oled_command>:
	
void oled_pos(uint8_t row, uint8_t column) {
	oled_goto_line(row);
	oled_goto_column(column);

}
 136:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xee8>
 13a:	08 95       	ret

0000013c <write_oled_data>:
 13c:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0x10e8>
 140:	08 95       	ret

00000142 <oled_init>:
 142:	8e ea       	ldi	r24, 0xAE	; 174
 144:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 148:	81 ea       	ldi	r24, 0xA1	; 161
 14a:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 14e:	82 e1       	ldi	r24, 0x12	; 18
 150:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 154:	88 ec       	ldi	r24, 0xC8	; 200
 156:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 15a:	88 ea       	ldi	r24, 0xA8	; 168
 15c:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 160:	8f e3       	ldi	r24, 0x3F	; 63
 162:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 166:	85 ed       	ldi	r24, 0xD5	; 213
 168:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 16c:	80 e8       	ldi	r24, 0x80	; 128
 16e:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 172:	81 e8       	ldi	r24, 0x81	; 129
 174:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 178:	80 e5       	ldi	r24, 0x50	; 80
 17a:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 17e:	89 ed       	ldi	r24, 0xD9	; 217
 180:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 184:	81 e2       	ldi	r24, 0x21	; 33
 186:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 18a:	80 e2       	ldi	r24, 0x20	; 32
 18c:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 196:	8b ed       	ldi	r24, 0xDB	; 219
 198:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 19c:	80 e3       	ldi	r24, 0x30	; 48
 19e:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 1a2:	8d ea       	ldi	r24, 0xAD	; 173
 1a4:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 1ae:	84 ea       	ldi	r24, 0xA4	; 164
 1b0:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 1b4:	86 ea       	ldi	r24, 0xA6	; 166
 1b6:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 1ba:	8f ea       	ldi	r24, 0xAF	; 175
 1bc:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 1c0:	08 95       	ret

000001c2 <oled_goto_line>:
 1c2:	80 55       	subi	r24, 0x50	; 80
 1c4:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 1c8:	08 95       	ret

000001ca <oled_goto_column>:
 1ca:	cf 93       	push	r28
 1cc:	c8 2f       	mov	r28, r24
 1ce:	8f 70       	andi	r24, 0x0F	; 15
 1d0:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 1d4:	8c 2f       	mov	r24, r28
 1d6:	82 95       	swap	r24
 1d8:	8f 70       	andi	r24, 0x0F	; 15
 1da:	80 5f       	subi	r24, 0xF0	; 240
 1dc:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <oled_clear_line>:
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <oled_goto_line>
 1ec:	c0 e0       	ldi	r28, 0x00	; 0
 1ee:	d0 e0       	ldi	r29, 0x00	; 0
 1f0:	07 c0       	rjmp	.+14     	; 0x200 <__EEPROM_REGION_LENGTH__>
 1f2:	8c 2f       	mov	r24, r28
 1f4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <oled_goto_column>
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 9e 00 	call	0x13c	; 0x13c <write_oled_data>
 1fe:	21 96       	adiw	r28, 0x01	; 1
 200:	c0 38       	cpi	r28, 0x80	; 128
 202:	d1 05       	cpc	r29, r1
 204:	b4 f3       	brlt	.-20     	; 0x1f2 <oled_clear_line+0xe>
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <oled_reset>:
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	c0 e0       	ldi	r28, 0x00	; 0
 212:	d0 e0       	ldi	r29, 0x00	; 0
 214:	04 c0       	rjmp	.+8      	; 0x21e <oled_reset+0x12>
 216:	8c 2f       	mov	r24, r28
 218:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <oled_clear_line>
 21c:	21 96       	adiw	r28, 0x01	; 1
 21e:	c8 30       	cpi	r28, 0x08	; 8
 220:	d1 05       	cpc	r29, r1
 222:	cc f3       	brlt	.-14     	; 0x216 <oled_reset+0xa>
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <oled_set_brigthness>:

void oled_set_brigthness(uint8_t lvl) {
 22a:	cf 93       	push	r28
 22c:	c8 2f       	mov	r28, r24
	write_oled_command(0x81);
 22e:	81 e8       	ldi	r24, 0x81	; 129
 230:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
	write_oled_command(lvl);
 234:	8c 2f       	mov	r24, r28
 236:	0e 94 9b 00 	call	0x136	; 0x136 <write_oled_command>
}
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <spi_init>:
#define MOSI PB5
#define MISO PB6
#define SCK  PB7

void spi_init(){
	DDRB |=	((1<<MOSI) & (1<<SCK) & (1<<nSS));	//Set MOSI, CLK, and SS to OUTPUT
 23e:	87 b3       	in	r24, 0x17	; 23
 240:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<MISO);							//Set MISO as INPUT
 242:	87 b3       	in	r24, 0x17	; 23
 244:	8f 7b       	andi	r24, 0xBF	; 191
 246:	87 bb       	out	0x17, r24	; 23
	
	PORTB |= (1<<nSS);							//Set SS to active LOW
 248:	88 b3       	in	r24, 0x18	; 24
 24a:	80 61       	ori	r24, 0x10	; 16
 24c:	88 bb       	out	0x18, r24	; 24
		
	SPCR |= ((1<<SCK)  &	// Enable SPI
 24e:	8d b1       	in	r24, 0x0d	; 13
 250:	8d b9       	out	0x0d, r24	; 13
			 (1<<MSTR) &	// Set to Master Mode
			 (1<<SPR0));	// CLK set to Fosc/16
			 
	SPSR &=	 ~(1<<SPI2X);	//Disable SPI double  speed
 252:	8e b1       	in	r24, 0x0e	; 14
 254:	8e 7f       	andi	r24, 0xFE	; 254
 256:	8e b9       	out	0x0e, r24	; 14
 258:	08 95       	ret

0000025a <spi_write>:
}

void spi_write(char c){
	char flush_buffer;
	SPDR = c;
 25a:	8f b9       	out	0x0f, r24	; 15
	
	while (!(SPSR & (1<<SPIF))); //Wait until serial transfer is complete	
 25c:	77 9b       	sbis	0x0e, 7	; 14
 25e:	fe cf       	rjmp	.-4      	; 0x25c <spi_write+0x2>
	flush_buffer = SPDR;
 260:	8f b1       	in	r24, 0x0f	; 15
 262:	08 95       	ret

00000264 <UART_transmit>:
 264:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <transmissionComplete>
 268:	99 23       	and	r25, r25
 26a:	e1 f3       	breq	.-8      	; 0x264 <UART_transmit>
 26c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <transmissionComplete>
 270:	8c b9       	out	0x0c, r24	; 12
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	08 95       	ret

00000278 <UART_recive>:
 278:	5f 9b       	sbis	0x0b, 7	; 11
 27a:	fe cf       	rjmp	.-4      	; 0x278 <UART_recive>
 27c:	8c b1       	in	r24, 0x0c	; 12
 27e:	08 95       	ret

00000280 <UART_init>:
 280:	10 bc       	out	0x20, r1	; 32
 282:	8f e1       	ldi	r24, 0x1F	; 31
 284:	89 b9       	out	0x09, r24	; 9
 286:	8a b1       	in	r24, 0x0a	; 10
 288:	88 65       	ori	r24, 0x58	; 88
 28a:	8a b9       	out	0x0a, r24	; 10
 28c:	80 b5       	in	r24, 0x20	; 32
 28e:	8e 68       	ori	r24, 0x8E	; 142
 290:	80 bd       	out	0x20, r24	; 32
 292:	6c e3       	ldi	r22, 0x3C	; 60
 294:	71 e0       	ldi	r23, 0x01	; 1
 296:	82 e3       	ldi	r24, 0x32	; 50
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	0e 94 66 01 	call	0x2cc	; 0x2cc <fdevopen>
 29e:	08 95       	ret

000002a0 <__vector_23>:
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	8f 93       	push	r24
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <transmissionComplete>
 2b2:	8f 91       	pop	r24
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <XMEM_init>:
 2be:	85 b7       	in	r24, 0x35	; 53
 2c0:	80 68       	ori	r24, 0x80	; 128
 2c2:	85 bf       	out	0x35, r24	; 53
 2c4:	80 b7       	in	r24, 0x30	; 48
 2c6:	80 62       	ori	r24, 0x20	; 32
 2c8:	80 bf       	out	0x30, r24	; 48
 2ca:	08 95       	ret

000002cc <fdevopen>:
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	00 97       	sbiw	r24, 0x00	; 0
 2d6:	31 f4       	brne	.+12     	; 0x2e4 <fdevopen+0x18>
 2d8:	61 15       	cp	r22, r1
 2da:	71 05       	cpc	r23, r1
 2dc:	19 f4       	brne	.+6      	; 0x2e4 <fdevopen+0x18>
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	3a c0       	rjmp	.+116    	; 0x358 <fdevopen+0x8c>
 2e4:	8b 01       	movw	r16, r22
 2e6:	ec 01       	movw	r28, r24
 2e8:	6e e0       	ldi	r22, 0x0E	; 14
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 b1 01 	call	0x362	; 0x362 <calloc>
 2f4:	fc 01       	movw	r30, r24
 2f6:	89 2b       	or	r24, r25
 2f8:	91 f3       	breq	.-28     	; 0x2de <fdevopen+0x12>
 2fa:	80 e8       	ldi	r24, 0x80	; 128
 2fc:	83 83       	std	Z+3, r24	; 0x03
 2fe:	01 15       	cp	r16, r1
 300:	11 05       	cpc	r17, r1
 302:	71 f0       	breq	.+28     	; 0x320 <fdevopen+0x54>
 304:	13 87       	std	Z+11, r17	; 0x0b
 306:	02 87       	std	Z+10, r16	; 0x0a
 308:	81 e8       	ldi	r24, 0x81	; 129
 30a:	83 83       	std	Z+3, r24	; 0x03
 30c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__iob>
 310:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__iob+0x1>
 314:	89 2b       	or	r24, r25
 316:	21 f4       	brne	.+8      	; 0x320 <fdevopen+0x54>
 318:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <__iob+0x1>
 31c:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <__iob>
 320:	20 97       	sbiw	r28, 0x00	; 0
 322:	c9 f0       	breq	.+50     	; 0x356 <fdevopen+0x8a>
 324:	d1 87       	std	Z+9, r29	; 0x09
 326:	c0 87       	std	Z+8, r28	; 0x08
 328:	83 81       	ldd	r24, Z+3	; 0x03
 32a:	82 60       	ori	r24, 0x02	; 2
 32c:	83 83       	std	Z+3, r24	; 0x03
 32e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__iob+0x2>
 332:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__iob+0x3>
 336:	89 2b       	or	r24, r25
 338:	71 f4       	brne	.+28     	; 0x356 <fdevopen+0x8a>
 33a:	f0 93 11 01 	sts	0x0111, r31	; 0x800111 <__iob+0x3>
 33e:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <__iob+0x2>
 342:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__iob+0x4>
 346:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__iob+0x5>
 34a:	89 2b       	or	r24, r25
 34c:	21 f4       	brne	.+8      	; 0x356 <fdevopen+0x8a>
 34e:	f0 93 13 01 	sts	0x0113, r31	; 0x800113 <__iob+0x5>
 352:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <__iob+0x4>
 356:	cf 01       	movw	r24, r30
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	0f 91       	pop	r16
 360:	08 95       	ret

00000362 <calloc>:
 362:	0f 93       	push	r16
 364:	1f 93       	push	r17
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	86 9f       	mul	r24, r22
 36c:	80 01       	movw	r16, r0
 36e:	87 9f       	mul	r24, r23
 370:	10 0d       	add	r17, r0
 372:	96 9f       	mul	r25, r22
 374:	10 0d       	add	r17, r0
 376:	11 24       	eor	r1, r1
 378:	c8 01       	movw	r24, r16
 37a:	0e 94 cd 01 	call	0x39a	; 0x39a <malloc>
 37e:	ec 01       	movw	r28, r24
 380:	00 97       	sbiw	r24, 0x00	; 0
 382:	29 f0       	breq	.+10     	; 0x38e <calloc+0x2c>
 384:	a8 01       	movw	r20, r16
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <memset>
 38e:	ce 01       	movw	r24, r28
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	08 95       	ret

0000039a <malloc>:
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	82 30       	cpi	r24, 0x02	; 2
 3a4:	91 05       	cpc	r25, r1
 3a6:	10 f4       	brcc	.+4      	; 0x3ac <malloc+0x12>
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__flp>
 3b0:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__flp+0x1>
 3b4:	20 e0       	ldi	r18, 0x00	; 0
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	a0 e0       	ldi	r26, 0x00	; 0
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	30 97       	sbiw	r30, 0x00	; 0
 3be:	19 f1       	breq	.+70     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 3c0:	40 81       	ld	r20, Z
 3c2:	51 81       	ldd	r21, Z+1	; 0x01
 3c4:	02 81       	ldd	r16, Z+2	; 0x02
 3c6:	13 81       	ldd	r17, Z+3	; 0x03
 3c8:	48 17       	cp	r20, r24
 3ca:	59 07       	cpc	r21, r25
 3cc:	c8 f0       	brcs	.+50     	; 0x400 <__DATA_REGION_LENGTH__>
 3ce:	84 17       	cp	r24, r20
 3d0:	95 07       	cpc	r25, r21
 3d2:	69 f4       	brne	.+26     	; 0x3ee <malloc+0x54>
 3d4:	10 97       	sbiw	r26, 0x00	; 0
 3d6:	31 f0       	breq	.+12     	; 0x3e4 <malloc+0x4a>
 3d8:	12 96       	adiw	r26, 0x02	; 2
 3da:	0c 93       	st	X, r16
 3dc:	12 97       	sbiw	r26, 0x02	; 2
 3de:	13 96       	adiw	r26, 0x03	; 3
 3e0:	1c 93       	st	X, r17
 3e2:	27 c0       	rjmp	.+78     	; 0x432 <__DATA_REGION_LENGTH__+0x32>
 3e4:	00 93 16 01 	sts	0x0116, r16	; 0x800116 <__flp>
 3e8:	10 93 17 01 	sts	0x0117, r17	; 0x800117 <__flp+0x1>
 3ec:	22 c0       	rjmp	.+68     	; 0x432 <__DATA_REGION_LENGTH__+0x32>
 3ee:	21 15       	cp	r18, r1
 3f0:	31 05       	cpc	r19, r1
 3f2:	19 f0       	breq	.+6      	; 0x3fa <malloc+0x60>
 3f4:	42 17       	cp	r20, r18
 3f6:	53 07       	cpc	r21, r19
 3f8:	18 f4       	brcc	.+6      	; 0x400 <__DATA_REGION_LENGTH__>
 3fa:	9a 01       	movw	r18, r20
 3fc:	bd 01       	movw	r22, r26
 3fe:	ef 01       	movw	r28, r30
 400:	df 01       	movw	r26, r30
 402:	f8 01       	movw	r30, r16
 404:	db cf       	rjmp	.-74     	; 0x3bc <malloc+0x22>
 406:	21 15       	cp	r18, r1
 408:	31 05       	cpc	r19, r1
 40a:	f9 f0       	breq	.+62     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 40c:	28 1b       	sub	r18, r24
 40e:	39 0b       	sbc	r19, r25
 410:	24 30       	cpi	r18, 0x04	; 4
 412:	31 05       	cpc	r19, r1
 414:	80 f4       	brcc	.+32     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
 416:	8a 81       	ldd	r24, Y+2	; 0x02
 418:	9b 81       	ldd	r25, Y+3	; 0x03
 41a:	61 15       	cp	r22, r1
 41c:	71 05       	cpc	r23, r1
 41e:	21 f0       	breq	.+8      	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 420:	fb 01       	movw	r30, r22
 422:	93 83       	std	Z+3, r25	; 0x03
 424:	82 83       	std	Z+2, r24	; 0x02
 426:	04 c0       	rjmp	.+8      	; 0x430 <__DATA_REGION_LENGTH__+0x30>
 428:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__flp+0x1>
 42c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__flp>
 430:	fe 01       	movw	r30, r28
 432:	32 96       	adiw	r30, 0x02	; 2
 434:	44 c0       	rjmp	.+136    	; 0x4be <__DATA_REGION_LENGTH__+0xbe>
 436:	fe 01       	movw	r30, r28
 438:	e2 0f       	add	r30, r18
 43a:	f3 1f       	adc	r31, r19
 43c:	81 93       	st	Z+, r24
 43e:	91 93       	st	Z+, r25
 440:	22 50       	subi	r18, 0x02	; 2
 442:	31 09       	sbc	r19, r1
 444:	39 83       	std	Y+1, r19	; 0x01
 446:	28 83       	st	Y, r18
 448:	3a c0       	rjmp	.+116    	; 0x4be <__DATA_REGION_LENGTH__+0xbe>
 44a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__brkval>
 44e:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__brkval+0x1>
 452:	23 2b       	or	r18, r19
 454:	41 f4       	brne	.+16     	; 0x466 <__DATA_REGION_LENGTH__+0x66>
 456:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 45a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 45e:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <__brkval+0x1>
 462:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <__brkval>
 466:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 46a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 46e:	21 15       	cp	r18, r1
 470:	31 05       	cpc	r19, r1
 472:	41 f4       	brne	.+16     	; 0x484 <__DATA_REGION_LENGTH__+0x84>
 474:	2d b7       	in	r18, 0x3d	; 61
 476:	3e b7       	in	r19, 0x3e	; 62
 478:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 47c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 480:	24 1b       	sub	r18, r20
 482:	35 0b       	sbc	r19, r21
 484:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__brkval>
 488:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__brkval+0x1>
 48c:	e2 17       	cp	r30, r18
 48e:	f3 07       	cpc	r31, r19
 490:	a0 f4       	brcc	.+40     	; 0x4ba <__DATA_REGION_LENGTH__+0xba>
 492:	2e 1b       	sub	r18, r30
 494:	3f 0b       	sbc	r19, r31
 496:	28 17       	cp	r18, r24
 498:	39 07       	cpc	r19, r25
 49a:	78 f0       	brcs	.+30     	; 0x4ba <__DATA_REGION_LENGTH__+0xba>
 49c:	ac 01       	movw	r20, r24
 49e:	4e 5f       	subi	r20, 0xFE	; 254
 4a0:	5f 4f       	sbci	r21, 0xFF	; 255
 4a2:	24 17       	cp	r18, r20
 4a4:	35 07       	cpc	r19, r21
 4a6:	48 f0       	brcs	.+18     	; 0x4ba <__DATA_REGION_LENGTH__+0xba>
 4a8:	4e 0f       	add	r20, r30
 4aa:	5f 1f       	adc	r21, r31
 4ac:	50 93 15 01 	sts	0x0115, r21	; 0x800115 <__brkval+0x1>
 4b0:	40 93 14 01 	sts	0x0114, r20	; 0x800114 <__brkval>
 4b4:	81 93       	st	Z+, r24
 4b6:	91 93       	st	Z+, r25
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <__DATA_REGION_LENGTH__+0xbe>
 4ba:	e0 e0       	ldi	r30, 0x00	; 0
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	cf 01       	movw	r24, r30
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	08 95       	ret

000004ca <free>:
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	00 97       	sbiw	r24, 0x00	; 0
 4d0:	09 f4       	brne	.+2      	; 0x4d4 <free+0xa>
 4d2:	81 c0       	rjmp	.+258    	; 0x5d6 <__stack+0xd7>
 4d4:	fc 01       	movw	r30, r24
 4d6:	32 97       	sbiw	r30, 0x02	; 2
 4d8:	13 82       	std	Z+3, r1	; 0x03
 4da:	12 82       	std	Z+2, r1	; 0x02
 4dc:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__flp>
 4e0:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__flp+0x1>
 4e4:	10 97       	sbiw	r26, 0x00	; 0
 4e6:	81 f4       	brne	.+32     	; 0x508 <__stack+0x9>
 4e8:	20 81       	ld	r18, Z
 4ea:	31 81       	ldd	r19, Z+1	; 0x01
 4ec:	82 0f       	add	r24, r18
 4ee:	93 1f       	adc	r25, r19
 4f0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__brkval>
 4f4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__brkval+0x1>
 4f8:	28 17       	cp	r18, r24
 4fa:	39 07       	cpc	r19, r25
 4fc:	51 f5       	brne	.+84     	; 0x552 <__stack+0x53>
 4fe:	f0 93 15 01 	sts	0x0115, r31	; 0x800115 <__brkval+0x1>
 502:	e0 93 14 01 	sts	0x0114, r30	; 0x800114 <__brkval>
 506:	67 c0       	rjmp	.+206    	; 0x5d6 <__stack+0xd7>
 508:	ed 01       	movw	r28, r26
 50a:	20 e0       	ldi	r18, 0x00	; 0
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	ce 17       	cp	r28, r30
 510:	df 07       	cpc	r29, r31
 512:	40 f4       	brcc	.+16     	; 0x524 <__stack+0x25>
 514:	4a 81       	ldd	r20, Y+2	; 0x02
 516:	5b 81       	ldd	r21, Y+3	; 0x03
 518:	9e 01       	movw	r18, r28
 51a:	41 15       	cp	r20, r1
 51c:	51 05       	cpc	r21, r1
 51e:	f1 f0       	breq	.+60     	; 0x55c <__stack+0x5d>
 520:	ea 01       	movw	r28, r20
 522:	f5 cf       	rjmp	.-22     	; 0x50e <__stack+0xf>
 524:	d3 83       	std	Z+3, r29	; 0x03
 526:	c2 83       	std	Z+2, r28	; 0x02
 528:	40 81       	ld	r20, Z
 52a:	51 81       	ldd	r21, Z+1	; 0x01
 52c:	84 0f       	add	r24, r20
 52e:	95 1f       	adc	r25, r21
 530:	c8 17       	cp	r28, r24
 532:	d9 07       	cpc	r29, r25
 534:	59 f4       	brne	.+22     	; 0x54c <__stack+0x4d>
 536:	88 81       	ld	r24, Y
 538:	99 81       	ldd	r25, Y+1	; 0x01
 53a:	84 0f       	add	r24, r20
 53c:	95 1f       	adc	r25, r21
 53e:	02 96       	adiw	r24, 0x02	; 2
 540:	91 83       	std	Z+1, r25	; 0x01
 542:	80 83       	st	Z, r24
 544:	8a 81       	ldd	r24, Y+2	; 0x02
 546:	9b 81       	ldd	r25, Y+3	; 0x03
 548:	93 83       	std	Z+3, r25	; 0x03
 54a:	82 83       	std	Z+2, r24	; 0x02
 54c:	21 15       	cp	r18, r1
 54e:	31 05       	cpc	r19, r1
 550:	29 f4       	brne	.+10     	; 0x55c <__stack+0x5d>
 552:	f0 93 17 01 	sts	0x0117, r31	; 0x800117 <__flp+0x1>
 556:	e0 93 16 01 	sts	0x0116, r30	; 0x800116 <__flp>
 55a:	3d c0       	rjmp	.+122    	; 0x5d6 <__stack+0xd7>
 55c:	e9 01       	movw	r28, r18
 55e:	fb 83       	std	Y+3, r31	; 0x03
 560:	ea 83       	std	Y+2, r30	; 0x02
 562:	49 91       	ld	r20, Y+
 564:	59 91       	ld	r21, Y+
 566:	c4 0f       	add	r28, r20
 568:	d5 1f       	adc	r29, r21
 56a:	ec 17       	cp	r30, r28
 56c:	fd 07       	cpc	r31, r29
 56e:	61 f4       	brne	.+24     	; 0x588 <__stack+0x89>
 570:	80 81       	ld	r24, Z
 572:	91 81       	ldd	r25, Z+1	; 0x01
 574:	84 0f       	add	r24, r20
 576:	95 1f       	adc	r25, r21
 578:	02 96       	adiw	r24, 0x02	; 2
 57a:	e9 01       	movw	r28, r18
 57c:	99 83       	std	Y+1, r25	; 0x01
 57e:	88 83       	st	Y, r24
 580:	82 81       	ldd	r24, Z+2	; 0x02
 582:	93 81       	ldd	r25, Z+3	; 0x03
 584:	9b 83       	std	Y+3, r25	; 0x03
 586:	8a 83       	std	Y+2, r24	; 0x02
 588:	e0 e0       	ldi	r30, 0x00	; 0
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	12 96       	adiw	r26, 0x02	; 2
 58e:	8d 91       	ld	r24, X+
 590:	9c 91       	ld	r25, X
 592:	13 97       	sbiw	r26, 0x03	; 3
 594:	00 97       	sbiw	r24, 0x00	; 0
 596:	19 f0       	breq	.+6      	; 0x59e <__stack+0x9f>
 598:	fd 01       	movw	r30, r26
 59a:	dc 01       	movw	r26, r24
 59c:	f7 cf       	rjmp	.-18     	; 0x58c <__stack+0x8d>
 59e:	8d 91       	ld	r24, X+
 5a0:	9c 91       	ld	r25, X
 5a2:	11 97       	sbiw	r26, 0x01	; 1
 5a4:	9d 01       	movw	r18, r26
 5a6:	2e 5f       	subi	r18, 0xFE	; 254
 5a8:	3f 4f       	sbci	r19, 0xFF	; 255
 5aa:	82 0f       	add	r24, r18
 5ac:	93 1f       	adc	r25, r19
 5ae:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__brkval>
 5b2:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__brkval+0x1>
 5b6:	28 17       	cp	r18, r24
 5b8:	39 07       	cpc	r19, r25
 5ba:	69 f4       	brne	.+26     	; 0x5d6 <__stack+0xd7>
 5bc:	30 97       	sbiw	r30, 0x00	; 0
 5be:	29 f4       	brne	.+10     	; 0x5ca <__stack+0xcb>
 5c0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__flp+0x1>
 5c4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__flp>
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <__stack+0xcf>
 5ca:	13 82       	std	Z+3, r1	; 0x03
 5cc:	12 82       	std	Z+2, r1	; 0x02
 5ce:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <__brkval+0x1>
 5d2:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <__brkval>
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	08 95       	ret

000005dc <memset>:
 5dc:	dc 01       	movw	r26, r24
 5de:	01 c0       	rjmp	.+2      	; 0x5e2 <memset+0x6>
 5e0:	6d 93       	st	X+, r22
 5e2:	41 50       	subi	r20, 0x01	; 1
 5e4:	50 40       	sbci	r21, 0x00	; 0
 5e6:	e0 f7       	brcc	.-8      	; 0x5e0 <memset+0x4>
 5e8:	08 95       	ret

000005ea <_exit>:
 5ea:	f8 94       	cli

000005ec <__stop_program>:
 5ec:	ff cf       	rjmp	.-2      	; 0x5ec <__stop_program>
