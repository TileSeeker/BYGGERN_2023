
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000009aa  00000a3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800116  00800116  00000a54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001758  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c97  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b12  00000000  00000000  00003017  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00003b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d9  00000000  00000000  00003e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ed  00000000  00000000  00004555  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00004e42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
   4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  5c:	0c 94 2e 03 	jmp	0x65c	; 0x65c <__vector_23>
  60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
  78:	00 06       	cpc	r0, r16
  7a:	5f 5f       	subi	r21, 0xFF	; 255
  7c:	06 00       	.word	0x0006	; ????
  7e:	00 00       	nop
  80:	00 07       	cpc	r16, r16
  82:	07 00       	.word	0x0007	; ????
  84:	07 07       	cpc	r16, r23
  86:	00 00       	nop
  88:	14 7f       	andi	r17, 0xF4	; 244
  8a:	7f 14       	cp	r7, r15
  8c:	7f 7f       	andi	r23, 0xFF	; 255
  8e:	14 00       	.word	0x0014	; ????
  90:	24 2e       	mov	r2, r20
  92:	6b 6b       	ori	r22, 0xBB	; 187
  94:	3a 12       	cpse	r3, r26
  96:	00 00       	nop
  98:	46 66       	ori	r20, 0x66	; 102
  9a:	30 18       	sub	r3, r0
  9c:	0c 66       	ori	r16, 0x6C	; 108
  9e:	62 00       	.word	0x0062	; ????
  a0:	30 7a       	andi	r19, 0xA0	; 160
  a2:	4f 5d       	subi	r20, 0xDF	; 223
  a4:	37 7a       	andi	r19, 0xA7	; 167
  a6:	48 00       	.word	0x0048	; ????
  a8:	04 07       	cpc	r16, r20
  aa:	03 00       	.word	0x0003	; ????
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	00 1c       	adc	r0, r0
  b2:	3e 63       	ori	r19, 0x3E	; 62
  b4:	41 00       	.word	0x0041	; ????
  b6:	00 00       	nop
  b8:	00 41       	sbci	r16, 0x10	; 16
  ba:	63 3e       	cpi	r22, 0xE3	; 227
  bc:	1c 00       	.word	0x001c	; ????
  be:	00 00       	nop
  c0:	08 2a       	or	r0, r24
  c2:	3e 1c       	adc	r3, r14
  c4:	1c 3e       	cpi	r17, 0xEC	; 236
  c6:	2a 08       	sbc	r2, r10
  c8:	08 08       	sbc	r0, r8
  ca:	3e 3e       	cpi	r19, 0xEE	; 238
  cc:	08 08       	sbc	r0, r8
  ce:	00 00       	nop
  d0:	00 a0       	ldd	r0, Z+32	; 0x20
  d2:	e0 60       	ori	r30, 0x00	; 0
  d4:	00 00       	nop
  d6:	00 00       	nop
  d8:	08 08       	sbc	r0, r8
  da:	08 08       	sbc	r0, r8
  dc:	08 08       	sbc	r0, r8
  de:	00 00       	nop
  e0:	00 00       	nop
  e2:	60 60       	ori	r22, 0x00	; 0
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	60 30       	cpi	r22, 0x00	; 0
  ea:	18 0c       	add	r1, r8
  ec:	06 03       	mulsu	r16, r22
  ee:	01 00       	.word	0x0001	; ????
  f0:	3e 7f       	andi	r19, 0xFE	; 254
  f2:	59 4d       	sbci	r21, 0xD9	; 217
  f4:	7f 3e       	cpi	r23, 0xEF	; 239
  f6:	00 00       	nop
  f8:	42 42       	sbci	r20, 0x22	; 34
  fa:	7f 7f       	andi	r23, 0xFF	; 255
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	00 00       	nop
 100:	62 73       	andi	r22, 0x32	; 50
 102:	59 49       	sbci	r21, 0x99	; 153
 104:	6f 66       	ori	r22, 0x6F	; 111
 106:	00 00       	nop
 108:	22 63       	ori	r18, 0x32	; 50
 10a:	49 49       	sbci	r20, 0x99	; 153
 10c:	7f 36       	cpi	r23, 0x6F	; 111
 10e:	00 00       	nop
 110:	18 1c       	adc	r1, r8
 112:	16 13       	cpse	r17, r22
 114:	7f 7f       	andi	r23, 0xFF	; 255
 116:	10 00       	.word	0x0010	; ????
 118:	27 67       	ori	r18, 0x77	; 119
 11a:	45 45       	sbci	r20, 0x55	; 85
 11c:	7d 39       	cpi	r23, 0x9D	; 157
 11e:	00 00       	nop
 120:	3c 7e       	andi	r19, 0xEC	; 236
 122:	4b 49       	sbci	r20, 0x9B	; 155
 124:	79 30       	cpi	r23, 0x09	; 9
 126:	00 00       	nop
 128:	03 63       	ori	r16, 0x33	; 51
 12a:	71 19       	sub	r23, r1
 12c:	0f 07       	cpc	r16, r31
 12e:	00 00       	nop
 130:	36 7f       	andi	r19, 0xF6	; 246
 132:	49 49       	sbci	r20, 0x99	; 153
 134:	7f 36       	cpi	r23, 0x6F	; 111
 136:	00 00       	nop
 138:	06 4f       	sbci	r16, 0xF6	; 246
 13a:	49 69       	ori	r20, 0x99	; 153
 13c:	3f 1e       	adc	r3, r31
 13e:	00 00       	nop
 140:	00 00       	nop
 142:	6c 6c       	ori	r22, 0xCC	; 204
 144:	00 00       	nop
 146:	00 00       	nop
 148:	00 a0       	ldd	r0, Z+32	; 0x20
 14a:	ec 6c       	ori	r30, 0xCC	; 204
 14c:	00 00       	nop
 14e:	00 00       	nop
 150:	08 1c       	adc	r0, r8
 152:	36 63       	ori	r19, 0x36	; 54
 154:	41 00       	.word	0x0041	; ????
 156:	00 00       	nop
 158:	14 14       	cp	r1, r4
 15a:	14 14       	cp	r1, r4
 15c:	14 14       	cp	r1, r4
 15e:	00 00       	nop
 160:	00 41       	sbci	r16, 0x10	; 16
 162:	63 36       	cpi	r22, 0x63	; 99
 164:	1c 08       	sbc	r1, r12
 166:	00 00       	nop
 168:	02 03       	mulsu	r16, r18
 16a:	51 59       	subi	r21, 0x91	; 145
 16c:	0f 06       	cpc	r0, r31
 16e:	00 00       	nop
 170:	3e 7f       	andi	r19, 0xFE	; 254
 172:	41 5d       	subi	r20, 0xD1	; 209
 174:	5d 1f       	adc	r21, r29
 176:	1e 00       	.word	0x001e	; ????
 178:	7c 7e       	andi	r23, 0xEC	; 236
 17a:	13 13       	cpse	r17, r19
 17c:	7e 7c       	andi	r23, 0xCE	; 206
 17e:	00 00       	nop
 180:	41 7f       	andi	r20, 0xF1	; 241
 182:	7f 49       	sbci	r23, 0x9F	; 159
 184:	49 7f       	andi	r20, 0xF9	; 249
 186:	36 00       	.word	0x0036	; ????
 188:	1c 3e       	cpi	r17, 0xEC	; 236
 18a:	63 41       	sbci	r22, 0x13	; 19
 18c:	41 63       	ori	r20, 0x31	; 49
 18e:	22 00       	.word	0x0022	; ????
 190:	41 7f       	andi	r20, 0xF1	; 241
 192:	7f 41       	sbci	r23, 0x1F	; 31
 194:	63 7f       	andi	r22, 0xF3	; 243
 196:	1c 00       	.word	0x001c	; ????
 198:	41 7f       	andi	r20, 0xF1	; 241
 19a:	7f 49       	sbci	r23, 0x9F	; 159
 19c:	5d 41       	sbci	r21, 0x1D	; 29
 19e:	63 00       	.word	0x0063	; ????
 1a0:	41 7f       	andi	r20, 0xF1	; 241
 1a2:	7f 49       	sbci	r23, 0x9F	; 159
 1a4:	1d 01       	movw	r2, r26
 1a6:	03 00       	.word	0x0003	; ????
 1a8:	1c 3e       	cpi	r17, 0xEC	; 236
 1aa:	63 41       	sbci	r22, 0x13	; 19
 1ac:	51 73       	andi	r21, 0x31	; 49
 1ae:	72 00       	.word	0x0072	; ????
 1b0:	7f 7f       	andi	r23, 0xFF	; 255
 1b2:	08 08       	sbc	r0, r8
 1b4:	7f 7f       	andi	r23, 0xFF	; 255
 1b6:	00 00       	nop
 1b8:	00 41       	sbci	r16, 0x10	; 16
 1ba:	7f 7f       	andi	r23, 0xFF	; 255
 1bc:	41 00       	.word	0x0041	; ????
 1be:	00 00       	nop
 1c0:	30 70       	andi	r19, 0x00	; 0
 1c2:	40 41       	sbci	r20, 0x10	; 16
 1c4:	7f 3f       	cpi	r23, 0xFF	; 255
 1c6:	01 00       	.word	0x0001	; ????
 1c8:	41 7f       	andi	r20, 0xF1	; 241
 1ca:	7f 08       	sbc	r7, r15
 1cc:	1c 77       	andi	r17, 0x7C	; 124
 1ce:	63 00       	.word	0x0063	; ????
 1d0:	41 7f       	andi	r20, 0xF1	; 241
 1d2:	7f 41       	sbci	r23, 0x1F	; 31
 1d4:	40 60       	ori	r20, 0x00	; 0
 1d6:	70 00       	.word	0x0070	; ????
 1d8:	7f 7f       	andi	r23, 0xFF	; 255
 1da:	06 0c       	add	r0, r6
 1dc:	06 7f       	andi	r16, 0xF6	; 246
 1de:	7f 00       	.word	0x007f	; ????
 1e0:	7f 7f       	andi	r23, 0xFF	; 255
 1e2:	06 0c       	add	r0, r6
 1e4:	18 7f       	andi	r17, 0xF8	; 248
 1e6:	7f 00       	.word	0x007f	; ????
 1e8:	1c 3e       	cpi	r17, 0xEC	; 236
 1ea:	63 41       	sbci	r22, 0x13	; 19
 1ec:	63 3e       	cpi	r22, 0xE3	; 227
 1ee:	1c 00       	.word	0x001c	; ????
 1f0:	41 7f       	andi	r20, 0xF1	; 241
 1f2:	7f 49       	sbci	r23, 0x9F	; 159
 1f4:	09 0f       	add	r16, r25
 1f6:	06 00       	.word	0x0006	; ????
 1f8:	1e 3f       	cpi	r17, 0xFE	; 254
 1fa:	21 71       	andi	r18, 0x11	; 17
 1fc:	7f 5e       	subi	r23, 0xEF	; 239
 1fe:	00 00       	nop
 200:	41 7f       	andi	r20, 0xF1	; 241
 202:	7f 19       	sub	r23, r15
 204:	39 6f       	ori	r19, 0xF9	; 249
 206:	46 00       	.word	0x0046	; ????
 208:	26 67       	ori	r18, 0x76	; 118
 20a:	4d 59       	subi	r20, 0x9D	; 157
 20c:	7b 32       	cpi	r23, 0x2B	; 43
 20e:	00 00       	nop
 210:	03 41       	sbci	r16, 0x13	; 19
 212:	7f 7f       	andi	r23, 0xFF	; 255
 214:	41 03       	mulsu	r20, r17
 216:	00 00       	nop
 218:	7f 7f       	andi	r23, 0xFF	; 255
 21a:	40 40       	sbci	r20, 0x00	; 0
 21c:	7f 7f       	andi	r23, 0xFF	; 255
 21e:	00 00       	nop
 220:	1f 3f       	cpi	r17, 0xFF	; 255
 222:	60 60       	ori	r22, 0x00	; 0
 224:	3f 1f       	adc	r19, r31
 226:	00 00       	nop
 228:	7f 7f       	andi	r23, 0xFF	; 255
 22a:	30 18       	sub	r3, r0
 22c:	30 7f       	andi	r19, 0xF0	; 240
 22e:	7f 00       	.word	0x007f	; ????
 230:	63 77       	andi	r22, 0x73	; 115
 232:	1c 08       	sbc	r1, r12
 234:	1c 77       	andi	r17, 0x7C	; 124
 236:	63 00       	.word	0x0063	; ????
 238:	07 4f       	sbci	r16, 0xF7	; 247
 23a:	78 78       	andi	r23, 0x88	; 136
 23c:	4f 07       	cpc	r20, r31
 23e:	00 00       	nop
 240:	67 73       	andi	r22, 0x37	; 55
 242:	59 4d       	sbci	r21, 0xD9	; 217
 244:	47 63       	ori	r20, 0x37	; 55
 246:	71 00       	.word	0x0071	; ????
 248:	00 7f       	andi	r16, 0xF0	; 240
 24a:	7f 41       	sbci	r23, 0x1F	; 31
 24c:	41 00       	.word	0x0041	; ????
 24e:	00 00       	nop
 250:	01 03       	mulsu	r16, r17
 252:	06 0c       	add	r0, r6
 254:	18 30       	cpi	r17, 0x08	; 8
 256:	60 00       	.word	0x0060	; ????
 258:	00 41       	sbci	r16, 0x10	; 16
 25a:	41 7f       	andi	r20, 0xF1	; 241
 25c:	7f 00       	.word	0x007f	; ????
 25e:	00 00       	nop
 260:	08 0c       	add	r0, r8
 262:	06 03       	mulsu	r16, r22
 264:	06 0c       	add	r0, r6
 266:	08 00       	.word	0x0008	; ????
 268:	80 80       	ld	r8, Z
 26a:	80 80       	ld	r8, Z
 26c:	80 80       	ld	r8, Z
 26e:	80 80       	ld	r8, Z
 270:	00 00       	nop
 272:	03 07       	cpc	r16, r19
 274:	04 00       	.word	0x0004	; ????
 276:	00 00       	nop
 278:	20 74       	andi	r18, 0x40	; 64
 27a:	54 54       	subi	r21, 0x44	; 68
 27c:	3c 78       	andi	r19, 0x8C	; 140
 27e:	40 00       	.word	0x0040	; ????
 280:	41 3f       	cpi	r20, 0xF1	; 241
 282:	7f 44       	sbci	r23, 0x4F	; 79
 284:	44 7c       	andi	r20, 0xC4	; 196
 286:	38 00       	.word	0x0038	; ????
 288:	38 7c       	andi	r19, 0xC8	; 200
 28a:	44 44       	sbci	r20, 0x44	; 68
 28c:	6c 28       	or	r6, r12
 28e:	00 00       	nop
 290:	30 78       	andi	r19, 0x80	; 128
 292:	48 49       	sbci	r20, 0x98	; 152
 294:	3f 7f       	andi	r19, 0xFF	; 255
 296:	40 00       	.word	0x0040	; ????
 298:	38 7c       	andi	r19, 0xC8	; 200
 29a:	54 54       	subi	r21, 0x44	; 68
 29c:	5c 18       	sub	r5, r12
 29e:	00 00       	nop
 2a0:	48 7e       	andi	r20, 0xE8	; 232
 2a2:	7f 49       	sbci	r23, 0x9F	; 159
 2a4:	03 02       	muls	r16, r19
 2a6:	00 00       	nop
 2a8:	98 bc       	out	0x28, r9	; 40
 2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
 2ac:	f8 7c       	andi	r31, 0xC8	; 200
 2ae:	04 00       	.word	0x0004	; ????
 2b0:	41 7f       	andi	r20, 0xF1	; 241
 2b2:	7f 08       	sbc	r7, r15
 2b4:	04 7c       	andi	r16, 0xC4	; 196
 2b6:	78 00       	.word	0x0078	; ????
 2b8:	00 44       	sbci	r16, 0x40	; 64
 2ba:	7d 7d       	andi	r23, 0xDD	; 221
 2bc:	40 00       	.word	0x0040	; ????
 2be:	00 00       	nop
 2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <__data_load_end+0x182>
 2c2:	84 fd       	sbrc	r24, 4
 2c4:	7d 00       	.word	0x007d	; ????
 2c6:	00 00       	nop
 2c8:	41 7f       	andi	r20, 0xF1	; 241
 2ca:	7f 10       	cpse	r7, r15
 2cc:	38 6c       	ori	r19, 0xC8	; 200
 2ce:	44 00       	.word	0x0044	; ????
 2d0:	00 41       	sbci	r16, 0x10	; 16
 2d2:	7f 7f       	andi	r23, 0xFF	; 255
 2d4:	40 00       	.word	0x0040	; ????
 2d6:	00 00       	nop
 2d8:	7c 7c       	andi	r23, 0xCC	; 204
 2da:	0c 18       	sub	r0, r12
 2dc:	0c 7c       	andi	r16, 0xCC	; 204
 2de:	78 00       	.word	0x0078	; ????
 2e0:	7c 7c       	andi	r23, 0xCC	; 204
 2e2:	04 04       	cpc	r0, r4
 2e4:	7c 78       	andi	r23, 0x8C	; 140
 2e6:	00 00       	nop
 2e8:	38 7c       	andi	r19, 0xC8	; 200
 2ea:	44 44       	sbci	r20, 0x44	; 68
 2ec:	7c 38       	cpi	r23, 0x8C	; 140
 2ee:	00 00       	nop
 2f0:	84 fc       	sbrc	r8, 4
 2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
 2f4:	24 3c       	cpi	r18, 0xC4	; 196
 2f6:	18 00       	.word	0x0018	; ????
 2f8:	18 3c       	cpi	r17, 0xC8	; 200
 2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
 2fc:	f8 fc       	.word	0xfcf8	; ????
 2fe:	84 00       	.word	0x0084	; ????
 300:	44 7c       	andi	r20, 0xC4	; 196
 302:	78 44       	sbci	r23, 0x48	; 72
 304:	1c 18       	sub	r1, r12
 306:	00 00       	nop
 308:	48 5c       	subi	r20, 0xC8	; 200
 30a:	54 54       	subi	r21, 0x44	; 68
 30c:	74 24       	eor	r7, r4
 30e:	00 00       	nop
 310:	00 04       	cpc	r0, r0
 312:	3e 7f       	andi	r19, 0xFE	; 254
 314:	44 24       	eor	r4, r4
 316:	00 00       	nop
 318:	3c 7c       	andi	r19, 0xCC	; 204
 31a:	40 40       	sbci	r20, 0x00	; 0
 31c:	3c 7c       	andi	r19, 0xCC	; 204
 31e:	40 00       	.word	0x0040	; ????
 320:	1c 3c       	cpi	r17, 0xCC	; 204
 322:	60 60       	ori	r22, 0x00	; 0
 324:	3c 1c       	adc	r3, r12
 326:	00 00       	nop
 328:	3c 7c       	andi	r19, 0xCC	; 204
 32a:	60 30       	cpi	r22, 0x00	; 0
 32c:	60 7c       	andi	r22, 0xC0	; 192
 32e:	3c 00       	.word	0x003c	; ????
 330:	44 6c       	ori	r20, 0xC4	; 196
 332:	38 10       	cpse	r3, r8
 334:	38 6c       	ori	r19, 0xC8	; 200
 336:	44 00       	.word	0x0044	; ????
 338:	9c bc       	out	0x2c, r9	; 44
 33a:	a0 a0       	ldd	r10, Z+32	; 0x20
 33c:	fc 7c       	andi	r31, 0xCC	; 204
 33e:	00 00       	nop
 340:	4c 64       	ori	r20, 0x4C	; 76
 342:	74 5c       	subi	r23, 0xC4	; 196
 344:	4c 64       	ori	r20, 0x4C	; 76
 346:	00 00       	nop
 348:	08 08       	sbc	r0, r8
 34a:	3e 77       	andi	r19, 0x7E	; 126
 34c:	41 41       	sbci	r20, 0x11	; 17
 34e:	00 00       	nop
 350:	00 00       	nop
 352:	00 77       	andi	r16, 0x70	; 112
 354:	77 00       	.word	0x0077	; ????
 356:	00 00       	nop
 358:	41 41       	sbci	r20, 0x11	; 17
 35a:	77 3e       	cpi	r23, 0xE7	; 231
 35c:	08 08       	sbc	r0, r8
 35e:	00 00       	nop
 360:	02 03       	mulsu	r16, r18
 362:	01 03       	mulsu	r16, r17
 364:	02 03       	mulsu	r16, r18
 366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
 368:	11 24       	eor	r1, r1
 36a:	1f be       	out	0x3f, r1	; 63
 36c:	cf ef       	ldi	r28, 0xFF	; 255
 36e:	d4 e0       	ldi	r29, 0x04	; 4
 370:	de bf       	out	0x3e, r29	; 62
 372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
 374:	11 e0       	ldi	r17, 0x01	; 1
 376:	a0 e0       	ldi	r26, 0x00	; 0
 378:	b1 e0       	ldi	r27, 0x01	; 1
 37a:	ea ea       	ldi	r30, 0xAA	; 170
 37c:	f9 e0       	ldi	r31, 0x09	; 9
 37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
 380:	05 90       	lpm	r0, Z+
 382:	0d 92       	st	X+, r0
 384:	a6 31       	cpi	r26, 0x16	; 22
 386:	b1 07       	cpc	r27, r17
 388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	a6 e1       	ldi	r26, 0x16	; 22
 38e:	b1 e0       	ldi	r27, 0x01	; 1
 390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
 392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
 394:	a4 32       	cpi	r26, 0x24	; 36
 396:	b2 07       	cpc	r27, r18
 398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
 39a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <main>
 39e:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <_exit>

000003a2 <__bad_interrupt>:
 3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_read>:
//	return value;
//}

int ADC_read(int channel) {
	volatile char *adc = (char *) 0x1400; //ADC start address
	adc[0] = (1 << 7) | channel; //Only "channel" channel is converted [table.1]
 3a6:	80 68       	ori	r24, 0x80	; 128
 3a8:	e0 e0       	ldi	r30, 0x00	; 0
 3aa:	f4 e1       	ldi	r31, 0x14	; 20
 3ac:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ae:	8b ee       	ldi	r24, 0xEB	; 235
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <ADC_read+0xc>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <ADC_read+0x12>
	uint8_t value;
	_delay_us(400);
	value = adc[0];
 3b8:	80 81       	ld	r24, Z
	return value;
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	08 95       	ret

000003be <joystick_calibrate>:
#include "joystick_lib.h"

void joystick_calibrate(void) {
	x_middle_position = ADC_read(channel_0);
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
 3c6:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 3ca:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
	y_middle_position = ADC_read(channel_1);
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read>
 3d6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <y_middle_position+0x1>
 3da:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <y_middle_position>
 3de:	08 95       	ret

000003e0 <main>:
// left slider: PWM PB4 -> AIN2 / channel 2
// right slider: PWM PD1 -> AIN3 / channel 3

int main(void)
{
	sei();  //Enable global interrupts	
 3e0:	78 94       	sei
	
	UART_init();
 3e2:	0e 94 1e 03 	call	0x63c	; 0x63c <UART_init>
	XMEM_init();
 3e6:	0e 94 3d 03 	call	0x67a	; 0x67a <XMEM_init>
	joystick_calibrate();
 3ea:	0e 94 df 01 	call	0x3be	; 0x3be <joystick_calibrate>
	oled_init();
 3ee:	0e 94 1e 02 	call	0x43c	; 0x43c <oled_init>
	oled_reset();
 3f2:	0e 94 83 02 	call	0x506	; 0x506 <oled_reset>
	oled_set_brigthness(255);
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	0e 94 9b 02 	call	0x536	; 0x536 <oled_set_brigthness>
	
	//oled test
	oled_arrow_at_pos(1, 0);
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 01 03 	call	0x602	; 0x602 <oled_arrow_at_pos>
	oled_print("Hello", 1, font_size);
 404:	48 e0       	ldi	r20, 0x08	; 8
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	87 e0       	ldi	r24, 0x07	; 7
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <oled_print>
	oled_print("Hello 2", 2, 1);
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	62 e0       	ldi	r22, 0x02	; 2
 414:	8d e0       	ldi	r24, 0x0D	; 13
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <oled_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41c:	2f ef       	ldi	r18, 0xFF	; 255
 41e:	8f e7       	ldi	r24, 0x7F	; 127
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	21 50       	subi	r18, 0x01	; 1
 424:	80 40       	sbci	r24, 0x00	; 0
 426:	90 40       	sbci	r25, 0x00	; 0
 428:	e1 f7       	brne	.-8      	; 0x422 <__DATA_REGION_LENGTH__+0x22>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
 42e:	f6 cf       	rjmp	.-20     	; 0x41c <__DATA_REGION_LENGTH__+0x1c>

00000430 <write_oled_command>:
#include "fonts.h"
#include <string.h>

void write_oled_command(uint8_t command) {
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
 430:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xedc>
 434:	08 95       	ret

00000436 <write_oled_data>:
}

void write_oled_data(uint8_t data) {
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
 436:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0x10dc>
 43a:	08 95       	ret

0000043c <oled_init>:
}

//9.4 Recommended Software Initialization
void oled_init(void) {
	write_oled_command(0xAE); //display off
 43c:	8e ea       	ldi	r24, 0xAE	; 174
 43e:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0xA1); //segment remap
 442:	81 ea       	ldi	r24, 0xA1	; 161
 444:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0x12);
 448:	82 e1       	ldi	r24, 0x12	; 18
 44a:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0xC8); //common output direction: com63~com0
 44e:	88 ec       	ldi	r24, 0xC8	; 200
 450:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0xA8); //multiplex ration mode:63
 454:	88 ea       	ldi	r24, 0xA8	; 168
 456:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0x3F);
 45a:	8f e3       	ldi	r24, 0x3F	; 63
 45c:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0xD5); //display divide ratio/osc. freq. mode
 460:	85 ed       	ldi	r24, 0xD5	; 213
 462:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0x080);
 466:	80 e8       	ldi	r24, 0x80	; 128
 468:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0x81); //contrast control
 46c:	81 e8       	ldi	r24, 0x81	; 129
 46e:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0x50);
 472:	80 e5       	ldi	r24, 0x50	; 80
 474:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0xD9); //set pre-charge period
 478:	89 ed       	ldi	r24, 0xD9	; 217
 47a:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0x21);
 47e:	81 e2       	ldi	r24, 0x21	; 33
 480:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0x20); //set memory adressing mode
 484:	80 e2       	ldi	r24, 0x20	; 32
 486:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0x02);
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0xDB); //VCOM deselect mode
 490:	8b ed       	ldi	r24, 0xDB	; 219
 492:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0x30); 
 496:	80 e3       	ldi	r24, 0x30	; 48
 498:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0xAD); //master configuration
 49c:	8d ea       	ldi	r24, 0xAD	; 173
 49e:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0x00);
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0xA4); //out follows RAM content
 4a8:	84 ea       	ldi	r24, 0xA4	; 164
 4aa:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0xA6); //set normal display
 4ae:	86 ea       	ldi	r24, 0xA6	; 166
 4b0:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0xAF); //display on
 4b4:	8f ea       	ldi	r24, 0xAF	; 175
 4b6:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
 4ba:	08 95       	ret

000004bc <oled_goto_line>:
}

void oled_goto_line(uint8_t line) {
	write_oled_command(0xB0 + line); //Set row
 4bc:	80 55       	subi	r24, 0x50	; 80
 4be:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
 4c2:	08 95       	ret

000004c4 <oled_goto_column>:
}

void oled_goto_column(uint8_t column) {
 4c4:	cf 93       	push	r28
 4c6:	c8 2f       	mov	r28, r24
	write_oled_command(0x00 + (column % 16)); //lower nibble
 4c8:	8f 70       	andi	r24, 0x0F	; 15
 4ca:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(0x10 + (column / 16)); //higher nibble
 4ce:	8c 2f       	mov	r24, r28
 4d0:	82 95       	swap	r24
 4d2:	8f 70       	andi	r24, 0x0F	; 15
 4d4:	80 5f       	subi	r24, 0xF0	; 240
 4d6:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
}
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <oled_clear_line>:

void oled_clear_line(uint8_t line) {
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
	oled_goto_line(line);
 4e2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <oled_goto_line>
	for (int j=0; j<127; j++) {
 4e6:	c0 e0       	ldi	r28, 0x00	; 0
 4e8:	d0 e0       	ldi	r29, 0x00	; 0
 4ea:	07 c0       	rjmp	.+14     	; 0x4fa <oled_clear_line+0x1c>
		oled_goto_column(j);
 4ec:	8c 2f       	mov	r24, r28
 4ee:	0e 94 62 02 	call	0x4c4	; 0x4c4 <oled_goto_column>
		write_oled_data(0x00);
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	0e 94 1b 02 	call	0x436	; 0x436 <write_oled_data>
	write_oled_command(0x10 + (column / 16)); //higher nibble
}

void oled_clear_line(uint8_t line) {
	oled_goto_line(line);
	for (int j=0; j<127; j++) {
 4f8:	21 96       	adiw	r28, 0x01	; 1
 4fa:	cf 37       	cpi	r28, 0x7F	; 127
 4fc:	d1 05       	cpc	r29, r1
 4fe:	b4 f3       	brlt	.-20     	; 0x4ec <oled_clear_line+0xe>
		oled_goto_column(j);
		write_oled_data(0x00);
	}
}
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	08 95       	ret

00000506 <oled_reset>:

void oled_reset() {
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
	for (int i=0; i<7; i++) {
 50a:	c0 e0       	ldi	r28, 0x00	; 0
 50c:	d0 e0       	ldi	r29, 0x00	; 0
 50e:	04 c0       	rjmp	.+8      	; 0x518 <oled_reset+0x12>
		oled_clear_line(i);
 510:	8c 2f       	mov	r24, r28
 512:	0e 94 6f 02 	call	0x4de	; 0x4de <oled_clear_line>
		write_oled_data(0x00);
	}
}

void oled_reset() {
	for (int i=0; i<7; i++) {
 516:	21 96       	adiw	r28, 0x01	; 1
 518:	c7 30       	cpi	r28, 0x07	; 7
 51a:	d1 05       	cpc	r29, r1
 51c:	cc f3       	brlt	.-14     	; 0x510 <oled_reset+0xa>
		oled_clear_line(i);
	}
}
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	08 95       	ret

00000524 <oled_pos>:

	
void oled_pos(uint8_t row, uint8_t column) {
 524:	cf 93       	push	r28
 526:	c6 2f       	mov	r28, r22
	oled_goto_line(row);
 528:	0e 94 5e 02 	call	0x4bc	; 0x4bc <oled_goto_line>
	oled_goto_column(column);
 52c:	8c 2f       	mov	r24, r28
 52e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <oled_goto_column>

}
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <oled_set_brigthness>:

void oled_set_brigthness(uint8_t lvl) {
 536:	cf 93       	push	r28
 538:	c8 2f       	mov	r28, r24
	write_oled_command(0x81);
 53a:	81 e8       	ldi	r24, 0x81	; 129
 53c:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
	write_oled_command(lvl);
 540:	8c 2f       	mov	r24, r28
 542:	0e 94 18 02 	call	0x430	; 0x430 <write_oled_command>
}
 546:	cf 91       	pop	r28
 548:	08 95       	ret

0000054a <oled_print_char>:

void oled_print_char(char str, uint8_t row, uint8_t column) {
 54a:	df 92       	push	r13
 54c:	ef 92       	push	r14
 54e:	ff 92       	push	r15
 550:	0f 93       	push	r16
 552:	1f 93       	push	r17
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
 558:	d8 2e       	mov	r13, r24
 55a:	d6 2f       	mov	r29, r22
	unsigned char letter;
	int i = column;
 55c:	e4 2e       	mov	r14, r20
 55e:	f1 2c       	mov	r15, r1
 560:	87 01       	movw	r16, r14
	for (i; i < (column + font_size); i++) {
 562:	1a c0       	rjmp	.+52     	; 0x598 <oled_print_char+0x4e>
		letter = pgm_read_byte(&(font8[str-32][i-column]));
 564:	ed 2d       	mov	r30, r13
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	b0 97       	sbiw	r30, 0x20	; 32
 56a:	c8 01       	movw	r24, r16
 56c:	8e 19       	sub	r24, r14
 56e:	9f 09       	sbc	r25, r15
 570:	ee 0f       	add	r30, r30
 572:	ff 1f       	adc	r31, r31
 574:	ee 0f       	add	r30, r30
 576:	ff 1f       	adc	r31, r31
 578:	ee 0f       	add	r30, r30
 57a:	ff 1f       	adc	r31, r31
 57c:	e8 0f       	add	r30, r24
 57e:	f9 1f       	adc	r31, r25
 580:	e0 59       	subi	r30, 0x90	; 144
 582:	ff 4f       	sbci	r31, 0xFF	; 255
 584:	c4 91       	lpm	r28, Z
		oled_pos(row,i);
 586:	60 2f       	mov	r22, r16
 588:	8d 2f       	mov	r24, r29
 58a:	0e 94 92 02 	call	0x524	; 0x524 <oled_pos>
		write_oled_data(letter);
 58e:	8c 2f       	mov	r24, r28
 590:	0e 94 1b 02 	call	0x436	; 0x436 <write_oled_data>
}

void oled_print_char(char str, uint8_t row, uint8_t column) {
	unsigned char letter;
	int i = column;
	for (i; i < (column + font_size); i++) {
 594:	0f 5f       	subi	r16, 0xFF	; 255
 596:	1f 4f       	sbci	r17, 0xFF	; 255
 598:	c7 01       	movw	r24, r14
 59a:	08 96       	adiw	r24, 0x08	; 8
 59c:	08 17       	cp	r16, r24
 59e:	19 07       	cpc	r17, r25
 5a0:	0c f3       	brlt	.-62     	; 0x564 <oled_print_char+0x1a>
		letter = pgm_read_byte(&(font8[str-32][i-column]));
		oled_pos(row,i);
		write_oled_data(letter);
	}
}
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	1f 91       	pop	r17
 5a8:	0f 91       	pop	r16
 5aa:	ff 90       	pop	r15
 5ac:	ef 90       	pop	r14
 5ae:	df 90       	pop	r13
 5b0:	08 95       	ret

000005b2 <oled_print>:

void oled_print(char string[], uint8_t row, uint8_t column) {
 5b2:	ef 92       	push	r14
 5b4:	ff 92       	push	r15
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	8c 01       	movw	r16, r24
 5c0:	e6 2e       	mov	r14, r22
 5c2:	f4 2e       	mov	r15, r20
	for (int i=0; i<strlen(string); i++) {
 5c4:	c0 e0       	ldi	r28, 0x00	; 0
 5c6:	d0 e0       	ldi	r29, 0x00	; 0
 5c8:	0b c0       	rjmp	.+22     	; 0x5e0 <oled_print+0x2e>
		oled_print_char(string[i], row, column);
 5ca:	f8 01       	movw	r30, r16
 5cc:	ec 0f       	add	r30, r28
 5ce:	fd 1f       	adc	r31, r29
 5d0:	4f 2d       	mov	r20, r15
 5d2:	6e 2d       	mov	r22, r14
 5d4:	80 81       	ld	r24, Z
 5d6:	0e 94 a5 02 	call	0x54a	; 0x54a <oled_print_char>
		column = column + font_size;
 5da:	88 e0       	ldi	r24, 0x08	; 8
 5dc:	f8 0e       	add	r15, r24
		write_oled_data(letter);
	}
}

void oled_print(char string[], uint8_t row, uint8_t column) {
	for (int i=0; i<strlen(string); i++) {
 5de:	21 96       	adiw	r28, 0x01	; 1
 5e0:	f8 01       	movw	r30, r16
 5e2:	01 90       	ld	r0, Z+
 5e4:	00 20       	and	r0, r0
 5e6:	e9 f7       	brne	.-6      	; 0x5e2 <oled_print+0x30>
 5e8:	31 97       	sbiw	r30, 0x01	; 1
 5ea:	e0 1b       	sub	r30, r16
 5ec:	f1 0b       	sbc	r31, r17
 5ee:	ce 17       	cp	r28, r30
 5f0:	df 07       	cpc	r29, r31
 5f2:	58 f3       	brcs	.-42     	; 0x5ca <oled_print+0x18>
		oled_print_char(string[i], row, column);
		column = column + font_size;
	}
	
}
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	1f 91       	pop	r17
 5fa:	0f 91       	pop	r16
 5fc:	ff 90       	pop	r15
 5fe:	ef 90       	pop	r14
 600:	08 95       	ret

00000602 <oled_arrow_at_pos>:

void oled_arrow_at_pos(uint8_t row, uint8_t column) {
	oled_pos(row, column);
 602:	0e 94 92 02 	call	0x524	; 0x524 <oled_pos>
	write_oled_data(0b00011000);
 606:	88 e1       	ldi	r24, 0x18	; 24
 608:	0e 94 1b 02 	call	0x436	; 0x436 <write_oled_data>
	write_oled_data(0b01111110);
 60c:	8e e7       	ldi	r24, 0x7E	; 126
 60e:	0e 94 1b 02 	call	0x436	; 0x436 <write_oled_data>
	write_oled_data(0b00111100);
 612:	8c e3       	ldi	r24, 0x3C	; 60
 614:	0e 94 1b 02 	call	0x436	; 0x436 <write_oled_data>
	write_oled_data(0b00011000);
 618:	88 e1       	ldi	r24, 0x18	; 24
 61a:	0e 94 1b 02 	call	0x436	; 0x436 <write_oled_data>
 61e:	08 95       	ret

00000620 <UART_transmit>:
volatile uint8_t transmissionComplete = 1;


int UART_transmit(char message) {
	//Wait for prev transmission to complete
	while (!transmissionComplete);
 620:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <transmissionComplete>
 624:	99 23       	and	r25, r25
 626:	e1 f3       	breq	.-8      	; 0x620 <UART_transmit>
	//Set TXC flag to indicate busy
	transmissionComplete = 0;
 628:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <transmissionComplete>
	
	//Put data into UDR buffer, sends the data
	UDR0 = message;
 62c:	8c b9       	out	0x0c, r24	; 12

	return 0;
}
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	08 95       	ret

00000634 <UART_recive>:

char UART_recive() {
	//Wait for unread data in UDR buffer
	while (!(UCSR0A & (1 << RXC0)));
 634:	5f 9b       	sbis	0x0b, 7	; 11
 636:	fe cf       	rjmp	.-4      	; 0x634 <UART_recive>
	
	//Return received data from buffer
	return UDR0;
 638:	8c b1       	in	r24, 0x0c	; 12
}
 63a:	08 95       	ret

0000063c <UART_init>:

void UART_init() {
	//Set baud rate
	UBRR0H = (BAUD_PRESCALE >> 8);
 63c:	10 bc       	out	0x20, r1	; 32
	UBRR0L = BAUD_PRESCALE;
 63e:	8f e1       	ldi	r24, 0x1F	; 31
 640:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter + TX complete interrupt
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0) | (1 << TXCIE0);
 642:	8a b1       	in	r24, 0x0a	; 10
 644:	88 65       	ori	r24, 0x58	; 88
 646:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8-bit data, stop bit = 2_bit
	UCSR0C |= (1 << URSEL0) | (1 << USBS0) | (1 << UCSZ01) | (1 << UCSZ00); //UCSZ10 -> UCSZ01
 648:	80 b5       	in	r24, 0x20	; 32
 64a:	8e 68       	ori	r24, 0x8E	; 142
 64c:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(&UART_transmit, &UART_recive);
 64e:	6a e1       	ldi	r22, 0x1A	; 26
 650:	73 e0       	ldi	r23, 0x03	; 3
 652:	80 e1       	ldi	r24, 0x10	; 16
 654:	93 e0       	ldi	r25, 0x03	; 3
 656:	0e 94 44 03 	call	0x688	; 0x688 <fdevopen>
 65a:	08 95       	ret

0000065c <__vector_23>:
}

//UART transmission complete interrupt handler
ISR(USART0_TXC_vect) {
 65c:	1f 92       	push	r1
 65e:	0f 92       	push	r0
 660:	0f b6       	in	r0, 0x3f	; 63
 662:	0f 92       	push	r0
 664:	11 24       	eor	r1, r1
 666:	8f 93       	push	r24
	//Set flag to indicate completion
	transmissionComplete = 1;
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <transmissionComplete>
 66e:	8f 91       	pop	r24
 670:	0f 90       	pop	r0
 672:	0f be       	out	0x3f, r0	; 63
 674:	0f 90       	pop	r0
 676:	1f 90       	pop	r1
 678:	18 95       	reti

0000067a <XMEM_init>:
#include "xmem.h"

void XMEM_init(void) {
	MCUCR |= (1 << SRE);	//Enable SRAM
 67a:	85 b7       	in	r24, 0x35	; 53
 67c:	80 68       	ori	r24, 0x80	; 128
 67e:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);	//Masks PC4 - PC7
 680:	80 b7       	in	r24, 0x30	; 48
 682:	80 62       	ori	r24, 0x20	; 32
 684:	80 bf       	out	0x30, r24	; 48
 686:	08 95       	ret

00000688 <fdevopen>:
 688:	0f 93       	push	r16
 68a:	1f 93       	push	r17
 68c:	cf 93       	push	r28
 68e:	df 93       	push	r29
 690:	00 97       	sbiw	r24, 0x00	; 0
 692:	31 f4       	brne	.+12     	; 0x6a0 <fdevopen+0x18>
 694:	61 15       	cp	r22, r1
 696:	71 05       	cpc	r23, r1
 698:	19 f4       	brne	.+6      	; 0x6a0 <fdevopen+0x18>
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	3a c0       	rjmp	.+116    	; 0x714 <fdevopen+0x8c>
 6a0:	8b 01       	movw	r16, r22
 6a2:	ec 01       	movw	r28, r24
 6a4:	6e e0       	ldi	r22, 0x0E	; 14
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 94 8f 03 	call	0x71e	; 0x71e <calloc>
 6b0:	fc 01       	movw	r30, r24
 6b2:	89 2b       	or	r24, r25
 6b4:	91 f3       	breq	.-28     	; 0x69a <fdevopen+0x12>
 6b6:	80 e8       	ldi	r24, 0x80	; 128
 6b8:	83 83       	std	Z+3, r24	; 0x03
 6ba:	01 15       	cp	r16, r1
 6bc:	11 05       	cpc	r17, r1
 6be:	71 f0       	breq	.+28     	; 0x6dc <fdevopen+0x54>
 6c0:	13 87       	std	Z+11, r17	; 0x0b
 6c2:	02 87       	std	Z+10, r16	; 0x0a
 6c4:	81 e8       	ldi	r24, 0x81	; 129
 6c6:	83 83       	std	Z+3, r24	; 0x03
 6c8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__iob>
 6cc:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__iob+0x1>
 6d0:	89 2b       	or	r24, r25
 6d2:	21 f4       	brne	.+8      	; 0x6dc <fdevopen+0x54>
 6d4:	f0 93 1b 01 	sts	0x011B, r31	; 0x80011b <__iob+0x1>
 6d8:	e0 93 1a 01 	sts	0x011A, r30	; 0x80011a <__iob>
 6dc:	20 97       	sbiw	r28, 0x00	; 0
 6de:	c9 f0       	breq	.+50     	; 0x712 <fdevopen+0x8a>
 6e0:	d1 87       	std	Z+9, r29	; 0x09
 6e2:	c0 87       	std	Z+8, r28	; 0x08
 6e4:	83 81       	ldd	r24, Z+3	; 0x03
 6e6:	82 60       	ori	r24, 0x02	; 2
 6e8:	83 83       	std	Z+3, r24	; 0x03
 6ea:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__iob+0x2>
 6ee:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__iob+0x3>
 6f2:	89 2b       	or	r24, r25
 6f4:	71 f4       	brne	.+28     	; 0x712 <fdevopen+0x8a>
 6f6:	f0 93 1d 01 	sts	0x011D, r31	; 0x80011d <__iob+0x3>
 6fa:	e0 93 1c 01 	sts	0x011C, r30	; 0x80011c <__iob+0x2>
 6fe:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__iob+0x4>
 702:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__iob+0x5>
 706:	89 2b       	or	r24, r25
 708:	21 f4       	brne	.+8      	; 0x712 <fdevopen+0x8a>
 70a:	f0 93 1f 01 	sts	0x011F, r31	; 0x80011f <__iob+0x5>
 70e:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <__iob+0x4>
 712:	cf 01       	movw	r24, r30
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	1f 91       	pop	r17
 71a:	0f 91       	pop	r16
 71c:	08 95       	ret

0000071e <calloc>:
 71e:	0f 93       	push	r16
 720:	1f 93       	push	r17
 722:	cf 93       	push	r28
 724:	df 93       	push	r29
 726:	86 9f       	mul	r24, r22
 728:	80 01       	movw	r16, r0
 72a:	87 9f       	mul	r24, r23
 72c:	10 0d       	add	r17, r0
 72e:	96 9f       	mul	r25, r22
 730:	10 0d       	add	r17, r0
 732:	11 24       	eor	r1, r1
 734:	c8 01       	movw	r24, r16
 736:	0e 94 ab 03 	call	0x756	; 0x756 <malloc>
 73a:	ec 01       	movw	r28, r24
 73c:	00 97       	sbiw	r24, 0x00	; 0
 73e:	29 f0       	breq	.+10     	; 0x74a <calloc+0x2c>
 740:	a8 01       	movw	r20, r16
 742:	60 e0       	ldi	r22, 0x00	; 0
 744:	70 e0       	ldi	r23, 0x00	; 0
 746:	0e 94 cc 04 	call	0x998	; 0x998 <memset>
 74a:	ce 01       	movw	r24, r28
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	1f 91       	pop	r17
 752:	0f 91       	pop	r16
 754:	08 95       	ret

00000756 <malloc>:
 756:	0f 93       	push	r16
 758:	1f 93       	push	r17
 75a:	cf 93       	push	r28
 75c:	df 93       	push	r29
 75e:	82 30       	cpi	r24, 0x02	; 2
 760:	91 05       	cpc	r25, r1
 762:	10 f4       	brcc	.+4      	; 0x768 <malloc+0x12>
 764:	82 e0       	ldi	r24, 0x02	; 2
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <__flp>
 76c:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <__flp+0x1>
 770:	20 e0       	ldi	r18, 0x00	; 0
 772:	30 e0       	ldi	r19, 0x00	; 0
 774:	a0 e0       	ldi	r26, 0x00	; 0
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	30 97       	sbiw	r30, 0x00	; 0
 77a:	19 f1       	breq	.+70     	; 0x7c2 <malloc+0x6c>
 77c:	40 81       	ld	r20, Z
 77e:	51 81       	ldd	r21, Z+1	; 0x01
 780:	02 81       	ldd	r16, Z+2	; 0x02
 782:	13 81       	ldd	r17, Z+3	; 0x03
 784:	48 17       	cp	r20, r24
 786:	59 07       	cpc	r21, r25
 788:	c8 f0       	brcs	.+50     	; 0x7bc <malloc+0x66>
 78a:	84 17       	cp	r24, r20
 78c:	95 07       	cpc	r25, r21
 78e:	69 f4       	brne	.+26     	; 0x7aa <malloc+0x54>
 790:	10 97       	sbiw	r26, 0x00	; 0
 792:	31 f0       	breq	.+12     	; 0x7a0 <malloc+0x4a>
 794:	12 96       	adiw	r26, 0x02	; 2
 796:	0c 93       	st	X, r16
 798:	12 97       	sbiw	r26, 0x02	; 2
 79a:	13 96       	adiw	r26, 0x03	; 3
 79c:	1c 93       	st	X, r17
 79e:	27 c0       	rjmp	.+78     	; 0x7ee <malloc+0x98>
 7a0:	00 93 22 01 	sts	0x0122, r16	; 0x800122 <__flp>
 7a4:	10 93 23 01 	sts	0x0123, r17	; 0x800123 <__flp+0x1>
 7a8:	22 c0       	rjmp	.+68     	; 0x7ee <malloc+0x98>
 7aa:	21 15       	cp	r18, r1
 7ac:	31 05       	cpc	r19, r1
 7ae:	19 f0       	breq	.+6      	; 0x7b6 <malloc+0x60>
 7b0:	42 17       	cp	r20, r18
 7b2:	53 07       	cpc	r21, r19
 7b4:	18 f4       	brcc	.+6      	; 0x7bc <malloc+0x66>
 7b6:	9a 01       	movw	r18, r20
 7b8:	bd 01       	movw	r22, r26
 7ba:	ef 01       	movw	r28, r30
 7bc:	df 01       	movw	r26, r30
 7be:	f8 01       	movw	r30, r16
 7c0:	db cf       	rjmp	.-74     	; 0x778 <malloc+0x22>
 7c2:	21 15       	cp	r18, r1
 7c4:	31 05       	cpc	r19, r1
 7c6:	f9 f0       	breq	.+62     	; 0x806 <malloc+0xb0>
 7c8:	28 1b       	sub	r18, r24
 7ca:	39 0b       	sbc	r19, r25
 7cc:	24 30       	cpi	r18, 0x04	; 4
 7ce:	31 05       	cpc	r19, r1
 7d0:	80 f4       	brcc	.+32     	; 0x7f2 <malloc+0x9c>
 7d2:	8a 81       	ldd	r24, Y+2	; 0x02
 7d4:	9b 81       	ldd	r25, Y+3	; 0x03
 7d6:	61 15       	cp	r22, r1
 7d8:	71 05       	cpc	r23, r1
 7da:	21 f0       	breq	.+8      	; 0x7e4 <malloc+0x8e>
 7dc:	fb 01       	movw	r30, r22
 7de:	93 83       	std	Z+3, r25	; 0x03
 7e0:	82 83       	std	Z+2, r24	; 0x02
 7e2:	04 c0       	rjmp	.+8      	; 0x7ec <malloc+0x96>
 7e4:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__flp+0x1>
 7e8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__flp>
 7ec:	fe 01       	movw	r30, r28
 7ee:	32 96       	adiw	r30, 0x02	; 2
 7f0:	44 c0       	rjmp	.+136    	; 0x87a <malloc+0x124>
 7f2:	fe 01       	movw	r30, r28
 7f4:	e2 0f       	add	r30, r18
 7f6:	f3 1f       	adc	r31, r19
 7f8:	81 93       	st	Z+, r24
 7fa:	91 93       	st	Z+, r25
 7fc:	22 50       	subi	r18, 0x02	; 2
 7fe:	31 09       	sbc	r19, r1
 800:	39 83       	std	Y+1, r19	; 0x01
 802:	28 83       	st	Y, r18
 804:	3a c0       	rjmp	.+116    	; 0x87a <malloc+0x124>
 806:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <__brkval>
 80a:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <__brkval+0x1>
 80e:	23 2b       	or	r18, r19
 810:	41 f4       	brne	.+16     	; 0x822 <malloc+0xcc>
 812:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 816:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 81a:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <__brkval+0x1>
 81e:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <__brkval>
 822:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 826:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 82a:	21 15       	cp	r18, r1
 82c:	31 05       	cpc	r19, r1
 82e:	41 f4       	brne	.+16     	; 0x840 <malloc+0xea>
 830:	2d b7       	in	r18, 0x3d	; 61
 832:	3e b7       	in	r19, 0x3e	; 62
 834:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 838:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 83c:	24 1b       	sub	r18, r20
 83e:	35 0b       	sbc	r19, r21
 840:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <__brkval>
 844:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <__brkval+0x1>
 848:	e2 17       	cp	r30, r18
 84a:	f3 07       	cpc	r31, r19
 84c:	a0 f4       	brcc	.+40     	; 0x876 <malloc+0x120>
 84e:	2e 1b       	sub	r18, r30
 850:	3f 0b       	sbc	r19, r31
 852:	28 17       	cp	r18, r24
 854:	39 07       	cpc	r19, r25
 856:	78 f0       	brcs	.+30     	; 0x876 <malloc+0x120>
 858:	ac 01       	movw	r20, r24
 85a:	4e 5f       	subi	r20, 0xFE	; 254
 85c:	5f 4f       	sbci	r21, 0xFF	; 255
 85e:	24 17       	cp	r18, r20
 860:	35 07       	cpc	r19, r21
 862:	48 f0       	brcs	.+18     	; 0x876 <malloc+0x120>
 864:	4e 0f       	add	r20, r30
 866:	5f 1f       	adc	r21, r31
 868:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <__brkval+0x1>
 86c:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <__brkval>
 870:	81 93       	st	Z+, r24
 872:	91 93       	st	Z+, r25
 874:	02 c0       	rjmp	.+4      	; 0x87a <malloc+0x124>
 876:	e0 e0       	ldi	r30, 0x00	; 0
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	cf 01       	movw	r24, r30
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	1f 91       	pop	r17
 882:	0f 91       	pop	r16
 884:	08 95       	ret

00000886 <free>:
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
 88a:	00 97       	sbiw	r24, 0x00	; 0
 88c:	09 f4       	brne	.+2      	; 0x890 <free+0xa>
 88e:	81 c0       	rjmp	.+258    	; 0x992 <free+0x10c>
 890:	fc 01       	movw	r30, r24
 892:	32 97       	sbiw	r30, 0x02	; 2
 894:	13 82       	std	Z+3, r1	; 0x03
 896:	12 82       	std	Z+2, r1	; 0x02
 898:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <__flp>
 89c:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <__flp+0x1>
 8a0:	10 97       	sbiw	r26, 0x00	; 0
 8a2:	81 f4       	brne	.+32     	; 0x8c4 <free+0x3e>
 8a4:	20 81       	ld	r18, Z
 8a6:	31 81       	ldd	r19, Z+1	; 0x01
 8a8:	82 0f       	add	r24, r18
 8aa:	93 1f       	adc	r25, r19
 8ac:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <__brkval>
 8b0:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <__brkval+0x1>
 8b4:	28 17       	cp	r18, r24
 8b6:	39 07       	cpc	r19, r25
 8b8:	51 f5       	brne	.+84     	; 0x90e <free+0x88>
 8ba:	f0 93 21 01 	sts	0x0121, r31	; 0x800121 <__brkval+0x1>
 8be:	e0 93 20 01 	sts	0x0120, r30	; 0x800120 <__brkval>
 8c2:	67 c0       	rjmp	.+206    	; 0x992 <free+0x10c>
 8c4:	ed 01       	movw	r28, r26
 8c6:	20 e0       	ldi	r18, 0x00	; 0
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	ce 17       	cp	r28, r30
 8cc:	df 07       	cpc	r29, r31
 8ce:	40 f4       	brcc	.+16     	; 0x8e0 <free+0x5a>
 8d0:	4a 81       	ldd	r20, Y+2	; 0x02
 8d2:	5b 81       	ldd	r21, Y+3	; 0x03
 8d4:	9e 01       	movw	r18, r28
 8d6:	41 15       	cp	r20, r1
 8d8:	51 05       	cpc	r21, r1
 8da:	f1 f0       	breq	.+60     	; 0x918 <free+0x92>
 8dc:	ea 01       	movw	r28, r20
 8de:	f5 cf       	rjmp	.-22     	; 0x8ca <free+0x44>
 8e0:	d3 83       	std	Z+3, r29	; 0x03
 8e2:	c2 83       	std	Z+2, r28	; 0x02
 8e4:	40 81       	ld	r20, Z
 8e6:	51 81       	ldd	r21, Z+1	; 0x01
 8e8:	84 0f       	add	r24, r20
 8ea:	95 1f       	adc	r25, r21
 8ec:	c8 17       	cp	r28, r24
 8ee:	d9 07       	cpc	r29, r25
 8f0:	59 f4       	brne	.+22     	; 0x908 <free+0x82>
 8f2:	88 81       	ld	r24, Y
 8f4:	99 81       	ldd	r25, Y+1	; 0x01
 8f6:	84 0f       	add	r24, r20
 8f8:	95 1f       	adc	r25, r21
 8fa:	02 96       	adiw	r24, 0x02	; 2
 8fc:	91 83       	std	Z+1, r25	; 0x01
 8fe:	80 83       	st	Z, r24
 900:	8a 81       	ldd	r24, Y+2	; 0x02
 902:	9b 81       	ldd	r25, Y+3	; 0x03
 904:	93 83       	std	Z+3, r25	; 0x03
 906:	82 83       	std	Z+2, r24	; 0x02
 908:	21 15       	cp	r18, r1
 90a:	31 05       	cpc	r19, r1
 90c:	29 f4       	brne	.+10     	; 0x918 <free+0x92>
 90e:	f0 93 23 01 	sts	0x0123, r31	; 0x800123 <__flp+0x1>
 912:	e0 93 22 01 	sts	0x0122, r30	; 0x800122 <__flp>
 916:	3d c0       	rjmp	.+122    	; 0x992 <free+0x10c>
 918:	e9 01       	movw	r28, r18
 91a:	fb 83       	std	Y+3, r31	; 0x03
 91c:	ea 83       	std	Y+2, r30	; 0x02
 91e:	49 91       	ld	r20, Y+
 920:	59 91       	ld	r21, Y+
 922:	c4 0f       	add	r28, r20
 924:	d5 1f       	adc	r29, r21
 926:	ec 17       	cp	r30, r28
 928:	fd 07       	cpc	r31, r29
 92a:	61 f4       	brne	.+24     	; 0x944 <free+0xbe>
 92c:	80 81       	ld	r24, Z
 92e:	91 81       	ldd	r25, Z+1	; 0x01
 930:	84 0f       	add	r24, r20
 932:	95 1f       	adc	r25, r21
 934:	02 96       	adiw	r24, 0x02	; 2
 936:	e9 01       	movw	r28, r18
 938:	99 83       	std	Y+1, r25	; 0x01
 93a:	88 83       	st	Y, r24
 93c:	82 81       	ldd	r24, Z+2	; 0x02
 93e:	93 81       	ldd	r25, Z+3	; 0x03
 940:	9b 83       	std	Y+3, r25	; 0x03
 942:	8a 83       	std	Y+2, r24	; 0x02
 944:	e0 e0       	ldi	r30, 0x00	; 0
 946:	f0 e0       	ldi	r31, 0x00	; 0
 948:	12 96       	adiw	r26, 0x02	; 2
 94a:	8d 91       	ld	r24, X+
 94c:	9c 91       	ld	r25, X
 94e:	13 97       	sbiw	r26, 0x03	; 3
 950:	00 97       	sbiw	r24, 0x00	; 0
 952:	19 f0       	breq	.+6      	; 0x95a <free+0xd4>
 954:	fd 01       	movw	r30, r26
 956:	dc 01       	movw	r26, r24
 958:	f7 cf       	rjmp	.-18     	; 0x948 <free+0xc2>
 95a:	8d 91       	ld	r24, X+
 95c:	9c 91       	ld	r25, X
 95e:	11 97       	sbiw	r26, 0x01	; 1
 960:	9d 01       	movw	r18, r26
 962:	2e 5f       	subi	r18, 0xFE	; 254
 964:	3f 4f       	sbci	r19, 0xFF	; 255
 966:	82 0f       	add	r24, r18
 968:	93 1f       	adc	r25, r19
 96a:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <__brkval>
 96e:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <__brkval+0x1>
 972:	28 17       	cp	r18, r24
 974:	39 07       	cpc	r19, r25
 976:	69 f4       	brne	.+26     	; 0x992 <free+0x10c>
 978:	30 97       	sbiw	r30, 0x00	; 0
 97a:	29 f4       	brne	.+10     	; 0x986 <free+0x100>
 97c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <__flp+0x1>
 980:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__flp>
 984:	02 c0       	rjmp	.+4      	; 0x98a <free+0x104>
 986:	13 82       	std	Z+3, r1	; 0x03
 988:	12 82       	std	Z+2, r1	; 0x02
 98a:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <__brkval+0x1>
 98e:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <__brkval>
 992:	df 91       	pop	r29
 994:	cf 91       	pop	r28
 996:	08 95       	ret

00000998 <memset>:
 998:	dc 01       	movw	r26, r24
 99a:	01 c0       	rjmp	.+2      	; 0x99e <memset+0x6>
 99c:	6d 93       	st	X+, r22
 99e:	41 50       	subi	r20, 0x01	; 1
 9a0:	50 40       	sbci	r21, 0x00	; 0
 9a2:	e0 f7       	brcc	.-8      	; 0x99c <memset+0x4>
 9a4:	08 95       	ret

000009a6 <_exit>:
 9a6:	f8 94       	cli

000009a8 <__stop_program>:
 9a8:	ff cf       	rjmp	.-2      	; 0x9a8 <__stop_program>
